
RTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006168  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800653c  0800653c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006544  08006544  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006544  08006544  00016544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800654c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040b4  20000010  0800655c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040c4  0800655c  000240c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017305  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003189  00000000  00000000  00037343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0003a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029873  00000000  00000000  0003ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a46  00000000  00000000  0006627b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103f2b  00000000  00000000  0007ccc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180bec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  00180c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08006350 	.word	0x08006350

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08006350 	.word	0x08006350

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <vApplicationGetIdleTaskMemory+0x2c>)
 8000554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <vApplicationGetIdleTaskMemory+0x30>)
 800055a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000080 	.word	0x20000080

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b0a8      	sub	sp, #160	; 0xa0
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fca0 	bl	8000ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f897 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f933 	bl	80007f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800058a:	f000 f901 	bl	8000790 <MX_USART3_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, QUEUE_t);
 800058e:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <main+0x10c>)
 8000590:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800059a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 f87c 	bl	800469e <osMessageCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a37      	ldr	r2, [pc, #220]	; (8000688 <main+0x110>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 16, QUEUE_t);
 80005ac:	4b35      	ldr	r3, [pc, #212]	; (8000684 <main+0x10c>)
 80005ae:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80005b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 80005b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 f86d 	bl	800469e <osMessageCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a31      	ldr	r2, [pc, #196]	; (800068c <main+0x114>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue03 */
  osMessageQDef(myQueue03, 16, QUEUE_t);
 80005ca:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <main+0x10c>)
 80005cc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue03Handle = osMessageCreate(osMessageQ(myQueue03), NULL);
 80005d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 f85e 	bl	800469e <osMessageCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <main+0x118>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <main+0x11c>)
 80005ea:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 ffeb 	bl	80045de <osThreadCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a23      	ldr	r2, [pc, #140]	; (8000698 <main+0x120>)
 800060c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <main+0x124>)
 8000610:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000622:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f003 ffd8 	bl	80045de <osThreadCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <main+0x128>)
 8000632:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <main+0x12c>)
 8000636:	f107 041c 	add.w	r4, r7, #28
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 ffc5 	bl	80045de <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <main+0x130>)
 8000658:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <main+0x134>)
 800065c:	463c      	mov	r4, r7
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800066c:	463b      	mov	r3, r7
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 ffb4 	bl	80045de <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <main+0x138>)
 800067a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067c:	f003 ffa8 	bl	80045d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x108>
 8000682:	bf00      	nop
 8000684:	08006398 	.word	0x08006398
 8000688:	20000314 	.word	0x20000314
 800068c:	20000318 	.word	0x20000318
 8000690:	2000031c 	.word	0x2000031c
 8000694:	080063a8 	.word	0x080063a8
 8000698:	20000304 	.word	0x20000304
 800069c:	080063c4 	.word	0x080063c4
 80006a0:	20000308 	.word	0x20000308
 80006a4:	080063e0 	.word	0x080063e0
 80006a8:	2000030c 	.word	0x2000030c
 80006ac:	080063fc 	.word	0x080063fc
 80006b0:	20000310 	.word	0x20000310

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fe3c 	bl	8006340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemClock_Config+0xd4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <SystemClock_Config+0xd4>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemClock_Config+0xd8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <SystemClock_Config+0xd8>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800071c:	2308      	movs	r3, #8
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000720:	23d8      	movs	r3, #216	; 0xd8
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4618      	mov	r0, r3
 8000736:	f000 ff7b 	bl	8001630 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000740:	f000 fa6c 	bl	8000c1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000744:	f000 ff24 	bl	8001590 <HAL_PWREx_EnableOverDrive>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074e:	f000 fa65 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2107      	movs	r1, #7
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fa0b 	bl	8001b8c <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800077c:	f000 fa4e 	bl	8000c1c <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <MX_USART3_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007d4:	f002 fb38 	bl	8002e48 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 fa1d 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000280 	.word	0x20000280
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b77      	ldr	r3, [pc, #476]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a76      	ldr	r2, [pc, #472]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b74      	ldr	r3, [pc, #464]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b71      	ldr	r3, [pc, #452]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a70      	ldr	r2, [pc, #448]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6e      	ldr	r3, [pc, #440]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a6a      	ldr	r2, [pc, #424]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b68      	ldr	r3, [pc, #416]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b65      	ldr	r3, [pc, #404]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a64      	ldr	r2, [pc, #400]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b5f      	ldr	r3, [pc, #380]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a5e      	ldr	r2, [pc, #376]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b5c      	ldr	r3, [pc, #368]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	4b59      	ldr	r3, [pc, #356]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a58      	ldr	r2, [pc, #352]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b56      	ldr	r3, [pc, #344]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f244 0181 	movw	r1, #16513	; 0x4081
 800089c:	4852      	ldr	r0, [pc, #328]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 800089e:	f000 fe5d 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	4851      	ldr	r0, [pc, #324]	; (80009ec <MX_GPIO_Init+0x1fc>)
 80008a8:	f000 fe58 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	484b      	ldr	r0, [pc, #300]	; (80009f0 <MX_GPIO_Init+0x200>)
 80008c4:	f000 fc9e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008c8:	2332      	movs	r3, #50	; 0x32
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d8:	230b      	movs	r3, #11
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4843      	ldr	r0, [pc, #268]	; (80009f0 <MX_GPIO_Init+0x200>)
 80008e4:	f000 fc8e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008e8:	2386      	movs	r3, #134	; 0x86
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f8:	230b      	movs	r3, #11
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	483c      	ldr	r0, [pc, #240]	; (80009f4 <MX_GPIO_Init+0x204>)
 8000904:	f000 fc7e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000908:	f244 0381 	movw	r3, #16513	; 0x4081
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4831      	ldr	r0, [pc, #196]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 8000922:	f000 fc6f 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000938:	230b      	movs	r3, #11
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4829      	ldr	r0, [pc, #164]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 8000944:	f000 fc5e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000948:	2340      	movs	r3, #64	; 0x40
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4823      	ldr	r0, [pc, #140]	; (80009ec <MX_GPIO_Init+0x1fc>)
 8000960:	f000 fc50 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	481d      	ldr	r0, [pc, #116]	; (80009ec <MX_GPIO_Init+0x1fc>)
 8000978:	f000 fc44 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800097c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800098e:	230a      	movs	r3, #10
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <MX_GPIO_Init+0x204>)
 800099a:	f000 fc33 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800099e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <MX_GPIO_Init+0x204>)
 80009b4:	f000 fc26 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ca:	230b      	movs	r3, #11
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_GPIO_Init+0x1fc>)
 80009d6:	f000 fc15 	bl	8001204 <HAL_GPIO_Init>

}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021800 	.word	0x40021800
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020000 	.word	0x40020000

080009f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

	if(huart == &huart3){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_UART_RxCpltCallback+0x68>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d127      	bne.n	8000a58 <HAL_UART_RxCpltCallback+0x60>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
		if(packet_data.QUEUE_buf[0] == '1'){
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_UART_RxCpltCallback+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b31      	cmp	r3, #49	; 0x31
 8000a12:	d108      	bne.n	8000a26 <HAL_UART_RxCpltCallback+0x2e>
			xQueueSendFromISR(myQueue01Handle, (packet_data.QUEUE_buf + 1), &xHigherPriorityTaskWoken);
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_UART_RxCpltCallback+0x70>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4914      	ldr	r1, [pc, #80]	; (8000a6c <HAL_UART_RxCpltCallback+0x74>)
 8000a1a:	f107 020c 	add.w	r2, r7, #12
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f004 f867 	bl	8004af2 <xQueueGenericSendFromISR>
		}
		else if(packet_data.QUEUE_buf[0] == '3'){
			xQueueSendFromISR(myQueue03Handle, (packet_data.QUEUE_buf + 1), &xHigherPriorityTaskWoken);
		}
	}
}
 8000a24:	e018      	b.n	8000a58 <HAL_UART_RxCpltCallback+0x60>
		else if(packet_data.QUEUE_buf[0] == '2'){
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_UART_RxCpltCallback+0x6c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b32      	cmp	r3, #50	; 0x32
 8000a2c:	d108      	bne.n	8000a40 <HAL_UART_RxCpltCallback+0x48>
			xQueueSendFromISR(myQueue02Handle, (packet_data.QUEUE_buf + 1), &xHigherPriorityTaskWoken);
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_UART_RxCpltCallback+0x78>)
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <HAL_UART_RxCpltCallback+0x74>)
 8000a34:	f107 020c 	add.w	r2, r7, #12
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f004 f85a 	bl	8004af2 <xQueueGenericSendFromISR>
}
 8000a3e:	e00b      	b.n	8000a58 <HAL_UART_RxCpltCallback+0x60>
		else if(packet_data.QUEUE_buf[0] == '3'){
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_UART_RxCpltCallback+0x6c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b33      	cmp	r3, #51	; 0x33
 8000a46:	d107      	bne.n	8000a58 <HAL_UART_RxCpltCallback+0x60>
			xQueueSendFromISR(myQueue03Handle, (packet_data.QUEUE_buf + 1), &xHigherPriorityTaskWoken);
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_UART_RxCpltCallback+0x7c>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	4907      	ldr	r1, [pc, #28]	; (8000a6c <HAL_UART_RxCpltCallback+0x74>)
 8000a4e:	f107 020c 	add.w	r2, r7, #12
 8000a52:	2300      	movs	r3, #0
 8000a54:	f004 f84d 	bl	8004af2 <xQueueGenericSendFromISR>
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000280 	.word	0x20000280
 8000a64:	20000320 	.word	0x20000320
 8000a68:	20000314 	.word	0x20000314
 8000a6c:	20000321 	.word	0x20000321
 8000a70:	20000318 	.word	0x20000318
 8000a74:	2000031c 	.word	0x2000031c

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	BaseType_t xTaskWokenByReceive = pdFALSE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
	uint8_t TX_buf[4];
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceiveFromISR(myQueue01Handle, TX_buf, &xTaskWokenByReceive)){
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <StartDefaultTask+0x3c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f107 020c 	add.w	r2, r7, #12
 8000a8c:	f107 0108 	add.w	r1, r7, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 f8ce 	bl	8004c32 <xQueueReceiveFromISR>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <StartDefaultTask+0x32>
		  HAL_UART_Transmit_IT(&huart3, TX_buf, 4);
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <StartDefaultTask+0x40>)
 8000aa6:	f002 fa1d 	bl	8002ee4 <HAL_UART_Transmit_IT>
	  }
    osDelay(1);
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f003 fde3 	bl	8004676 <osDelay>
	  if(xQueueReceiveFromISR(myQueue01Handle, TX_buf, &xTaskWokenByReceive)){
 8000ab0:	e7e8      	b.n	8000a84 <StartDefaultTask+0xc>
 8000ab2:	bf00      	nop
 8000ab4:	20000314 	.word	0x20000314
 8000ab8:	20000280 	.word	0x20000280

08000abc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive_IT(&huart3, packet_data.QUEUE_buf, 5);
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <StartTask02+0x1c>)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <StartTask02+0x20>)
 8000aca:	f002 fa79 	bl	8002fc0 <HAL_UART_Receive_IT>
    osDelay(1);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f003 fdd1 	bl	8004676 <osDelay>
	HAL_UART_Receive_IT(&huart3, packet_data.QUEUE_buf, 5);
 8000ad4:	e7f6      	b.n	8000ac4 <StartTask02+0x8>
 8000ad6:	bf00      	nop
 8000ad8:	20000320 	.word	0x20000320
 8000adc:	20000280 	.word	0x20000280

08000ae0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	BaseType_t xTaskWokenByReceive = pdFALSE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
	uint8_t TX_buf[4];
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceiveFromISR(myQueue02Handle, TX_buf, &xTaskWokenByReceive)){
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <StartTask03+0x80>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f107 020c 	add.w	r2, r7, #12
 8000af4:	f107 0108 	add.w	r1, r7, #8
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 f89a 	bl	8004c32 <xQueueReceiveFromISR>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d029      	beq.n	8000b58 <StartTask03+0x78>
		  for(int i = 0; i < 4; i++){
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e01c      	b.n	8000b44 <StartTask03+0x64>
			  TX_buf[i] = toupper(TX_buf[i]);
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	74fb      	strb	r3, [r7, #19]
 8000b16:	7cfb      	ldrb	r3, [r7, #19]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <StartTask03+0x84>)
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d102      	bne.n	8000b2e <StartTask03+0x4e>
 8000b28:	7cfb      	ldrb	r3, [r7, #19]
 8000b2a:	3b20      	subs	r3, #32
 8000b2c:	e000      	b.n	8000b30 <StartTask03+0x50>
 8000b2e:	7cfb      	ldrb	r3, [r7, #19]
 8000b30:	b2d9      	uxtb	r1, r3
 8000b32:	f107 0208 	add.w	r2, r7, #8
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	460a      	mov	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; i++){
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	dddf      	ble.n	8000b0a <StartTask03+0x2a>
		  }
		  HAL_UART_Transmit_IT(&huart3, TX_buf, 4);
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	2204      	movs	r2, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <StartTask03+0x88>)
 8000b54:	f002 f9c6 	bl	8002ee4 <HAL_UART_Transmit_IT>
	  }
    osDelay(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f003 fd8c 	bl	8004676 <osDelay>
	  if(xQueueReceiveFromISR(myQueue02Handle, TX_buf, &xTaskWokenByReceive)){
 8000b5e:	e7c5      	b.n	8000aec <StartTask03+0xc>
 8000b60:	20000318 	.word	0x20000318
 8000b64:	08006438 	.word	0x08006438
 8000b68:	20000280 	.word	0x20000280

08000b6c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	BaseType_t xTaskWokenByReceive = pdFALSE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	uint8_t TX_buf[4];
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceiveFromISR(myQueue03Handle, TX_buf, &xTaskWokenByReceive)){
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <StartTask04+0x80>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f107 020c 	add.w	r2, r7, #12
 8000b80:	f107 0108 	add.w	r1, r7, #8
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 f854 	bl	8004c32 <xQueueReceiveFromISR>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d029      	beq.n	8000be4 <StartTask04+0x78>
		  for(int i = 0; i < 4; i++){
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e01c      	b.n	8000bd0 <StartTask04+0x64>
			  TX_buf[i] = tolower(TX_buf[i]);
 8000b96:	f107 0208 	add.w	r2, r7, #8
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	74fb      	strb	r3, [r7, #19]
 8000ba2:	7cfb      	ldrb	r3, [r7, #19]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <StartTask04+0x84>)
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d102      	bne.n	8000bba <StartTask04+0x4e>
 8000bb4:	7cfb      	ldrb	r3, [r7, #19]
 8000bb6:	3320      	adds	r3, #32
 8000bb8:	e000      	b.n	8000bbc <StartTask04+0x50>
 8000bba:	7cfb      	ldrb	r3, [r7, #19]
 8000bbc:	b2d9      	uxtb	r1, r3
 8000bbe:	f107 0208 	add.w	r2, r7, #8
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; i++){
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	dddf      	ble.n	8000b96 <StartTask04+0x2a>
		  }
		  HAL_UART_Transmit_IT(&huart3, TX_buf, 4);
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	2204      	movs	r2, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <StartTask04+0x88>)
 8000be0:	f002 f980 	bl	8002ee4 <HAL_UART_Transmit_IT>
	  }
    osDelay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f003 fd46 	bl	8004676 <osDelay>
	  if(xQueueReceiveFromISR(myQueue03Handle, TX_buf, &xTaskWokenByReceive)){
 8000bea:	e7c5      	b.n	8000b78 <StartTask04+0xc>
 8000bec:	2000031c 	.word	0x2000031c
 8000bf0:	08006438 	.word	0x08006438
 8000bf4:	20000280 	.word	0x20000280

08000bf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0a:	f000 f967 	bl	8000edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40000c00 	.word	0x40000c00

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	210f      	movs	r1, #15
 8000c62:	f06f 0001 	mvn.w	r0, #1
 8000c66:	f000 fa11 	bl	800108c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0ae      	sub	sp, #184	; 0xb8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2290      	movs	r2, #144	; 0x90
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f005 fb51 	bl	8006340 <memset>
  if(huart->Instance==USART3)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <HAL_UART_MspInit+0xc4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d144      	bne.n	8000d32 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 f9be 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cc2:	f7ff ffab 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <HAL_UART_MspInit+0xc8>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <HAL_UART_MspInit+0xc8>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0xc8>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_UART_MspInit+0xc8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0xc8>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0xc8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d10:	2307      	movs	r3, #7
 8000d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <HAL_UART_MspInit+0xcc>)
 8000d1e:	f000 fa71 	bl	8001204 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2105      	movs	r1, #5
 8000d26:	2027      	movs	r0, #39	; 0x27
 8000d28:	f000 f9b0 	bl	800108c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d2c:	2027      	movs	r0, #39	; 0x27
 8000d2e:	f000 f9c9 	bl	80010c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	37b8      	adds	r7, #184	; 0xb8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020c00 	.word	0x40020c00

08000d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2032      	movs	r0, #50	; 0x32
 8000d5e:	f000 f995 	bl	800108c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d62:	2032      	movs	r0, #50	; 0x32
 8000d64:	f000 f9ae 	bl	80010c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <HAL_InitTick+0xa0>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_InitTick+0xa0>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_InitTick+0xa0>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 f922 	bl	8001fd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d90:	f001 f8f8 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8000d94:	4603      	mov	r3, r0
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_InitTick+0xa4>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	0c9b      	lsrs	r3, r3, #18
 8000da4:	3b01      	subs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_InitTick+0xa8>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <HAL_InitTick+0xac>)
 8000dac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_InitTick+0xa8>)
 8000db0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_InitTick+0xa8>)
 8000db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dba:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_InitTick+0xa8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_InitTick+0xa8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_InitTick+0xa8>)
 8000dca:	f001 fd5d 	bl	8002888 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d104      	bne.n	8000dde <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <HAL_InitTick+0xa8>)
 8000dd6:	f001 fdb9 	bl	800294c <HAL_TIM_Base_Start_IT>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	20000328 	.word	0x20000328
 8000df4:	40000c00 	.word	0x40000c00

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <USART3_IRQHandler+0x10>)
 8000e2a:	f002 f917 	bl	800305c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000280 	.word	0x20000280

08000e38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM5_IRQHandler+0x10>)
 8000e3e:	f001 fdfd 	bl	8002a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000328 	.word	0x20000328

08000e4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f005 fa1d 	bl	80062dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fb69 	bl	8000578 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000eb4:	0800654c 	.word	0x0800654c
  ldr r2, =_sbss
 8000eb8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ebc:	200040c4 	.word	0x200040c4

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>

08000ec2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f000 f8d5 	bl	8001076 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ecc:	200f      	movs	r0, #15
 8000ece:	f7ff ff3b 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed2:	f7ff fea9 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000374 	.word	0x20000374

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000374 	.word	0x20000374

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <__NVIC_SetPriorityGrouping+0x40>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x40>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	05fa0000 	.word	0x05fa0000

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff4c 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109e:	f7ff ff61 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f7ff ffb1 	bl	8001010 <NVIC_EncodePriority>
 80010ae:	4602      	mov	r2, r0
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff80 	bl	8000fbc <__NVIC_SetPriority>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff54 	bl	8000f80 <__NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ee:	f7ff ff09 	bl	8000f04 <HAL_GetTick>
 80010f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e052      	b.n	80011b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0216 	bic.w	r2, r2, #22
 8001120:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001130:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <HAL_DMA_Abort+0x62>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0208 	bic.w	r2, r2, #8
 8001150:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0201 	bic.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001162:	e013      	b.n	800118c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001164:	f7ff fece 	bl	8000f04 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b05      	cmp	r3, #5
 8001170:	d90c      	bls.n	800118c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2220      	movs	r2, #32
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e015      	b.n	80011b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e4      	bne.n	8001164 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119e:	223f      	movs	r2, #63	; 0x3f
 80011a0:	409a      	lsls	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d004      	beq.n	80011de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00c      	b.n	80011f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2205      	movs	r2, #5
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e175      	b.n	8001510 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 8164 	bne.w	800150a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_GPIO_Init+0x56>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d130      	bne.n	80012bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d017      	beq.n	80012f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80be 	beq.w	800150a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <HAL_GPIO_Init+0x324>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013a6:	4a61      	ldr	r2, [pc, #388]	; (800152c <HAL_GPIO_Init+0x328>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a58      	ldr	r2, [pc, #352]	; (8001530 <HAL_GPIO_Init+0x32c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d037      	beq.n	8001442 <HAL_GPIO_Init+0x23e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a57      	ldr	r2, [pc, #348]	; (8001534 <HAL_GPIO_Init+0x330>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d031      	beq.n	800143e <HAL_GPIO_Init+0x23a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a56      	ldr	r2, [pc, #344]	; (8001538 <HAL_GPIO_Init+0x334>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d02b      	beq.n	800143a <HAL_GPIO_Init+0x236>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a55      	ldr	r2, [pc, #340]	; (800153c <HAL_GPIO_Init+0x338>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d025      	beq.n	8001436 <HAL_GPIO_Init+0x232>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a54      	ldr	r2, [pc, #336]	; (8001540 <HAL_GPIO_Init+0x33c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d01f      	beq.n	8001432 <HAL_GPIO_Init+0x22e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a53      	ldr	r2, [pc, #332]	; (8001544 <HAL_GPIO_Init+0x340>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d019      	beq.n	800142e <HAL_GPIO_Init+0x22a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a52      	ldr	r2, [pc, #328]	; (8001548 <HAL_GPIO_Init+0x344>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0x226>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a51      	ldr	r2, [pc, #324]	; (800154c <HAL_GPIO_Init+0x348>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00d      	beq.n	8001426 <HAL_GPIO_Init+0x222>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a50      	ldr	r2, [pc, #320]	; (8001550 <HAL_GPIO_Init+0x34c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x21e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <HAL_GPIO_Init+0x350>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_GPIO_Init+0x21a>
 800141a:	2309      	movs	r3, #9
 800141c:	e012      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800141e:	230a      	movs	r3, #10
 8001420:	e010      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001422:	2308      	movs	r3, #8
 8001424:	e00e      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001426:	2307      	movs	r3, #7
 8001428:	e00c      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800142a:	2306      	movs	r3, #6
 800142c:	e00a      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800142e:	2305      	movs	r3, #5
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001432:	2304      	movs	r3, #4
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001442:	2300      	movs	r3, #0
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001454:	4935      	ldr	r1, [pc, #212]	; (800152c <HAL_GPIO_Init+0x328>)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_GPIO_Init+0x354>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a34      	ldr	r2, [pc, #208]	; (8001558 <HAL_GPIO_Init+0x354>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_GPIO_Init+0x354>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a29      	ldr	r2, [pc, #164]	; (8001558 <HAL_GPIO_Init+0x354>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_GPIO_Init+0x354>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_GPIO_Init+0x354>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_GPIO_Init+0x354>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_GPIO_Init+0x354>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f67f ae86 	bls.w	8001224 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400
 8001538:	40020800 	.word	0x40020800
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40021400 	.word	0x40021400
 8001548:	40021800 	.word	0x40021800
 800154c:	40021c00 	.word	0x40021c00
 8001550:	40022000 	.word	0x40022000
 8001554:	40022400 	.word	0x40022400
 8001558:	40013c00 	.word	0x40013c00

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_PWREx_EnableOverDrive+0x98>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_PWREx_EnableOverDrive+0x98>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_PWREx_EnableOverDrive+0x98>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015be:	f7ff fca1 	bl	8000f04 <HAL_GetTick>
 80015c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015c4:	e009      	b.n	80015da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015c6:	f7ff fc9d 	bl	8000f04 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d4:	d901      	bls.n	80015da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e022      	b.n	8001620 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e6:	d1ee      	bne.n	80015c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0f      	ldr	r2, [pc, #60]	; (800162c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f4:	f7ff fc86 	bl	8000f04 <HAL_GetTick>
 80015f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015fa:	e009      	b.n	8001610 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015fc:	f7ff fc82 	bl	8000f04 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800160a:	d901      	bls.n	8001610 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e007      	b.n	8001620 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800161c:	d1ee      	bne.n	80015fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e29b      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8087 	beq.w	8001762 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001654:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b04      	cmp	r3, #4
 800165e:	d00c      	beq.n	800167a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001660:	4b93      	ldr	r3, [pc, #588]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d112      	bne.n	8001692 <HAL_RCC_OscConfig+0x62>
 800166c:	4b90      	ldr	r3, [pc, #576]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001678:	d10b      	bne.n	8001692 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167a:	4b8d      	ldr	r3, [pc, #564]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d06c      	beq.n	8001760 <HAL_RCC_OscConfig+0x130>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d168      	bne.n	8001760 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e275      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x7a>
 800169c:	4b84      	ldr	r3, [pc, #528]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a83      	ldr	r2, [pc, #524]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e02e      	b.n	8001708 <HAL_RCC_OscConfig+0xd8>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x9c>
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7e      	ldr	r2, [pc, #504]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7b      	ldr	r2, [pc, #492]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0xd8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0xc0>
 80016d6:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a75      	ldr	r2, [pc, #468]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a72      	ldr	r2, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0xd8>
 80016f0:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b6c      	ldr	r3, [pc, #432]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6b      	ldr	r2, [pc, #428]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fbf8 	bl	8000f04 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fbf4 	bl	8000f04 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e229      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0xe8>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fbe4 	bl	8000f04 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fbe0 	bl	8000f04 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e215      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x110>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d069      	beq.n	8001842 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	d11c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x190>
 8001786:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d116      	bne.n	80017c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x17a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e1e9      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	493d      	ldr	r1, [pc, #244]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	e040      	b.n	8001842 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d023      	beq.n	8001810 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb96 	bl	8000f04 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff fb92 	bl	8000f04 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1c7      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4929      	ldr	r1, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
 800180e:	e018      	b.n	8001842 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fb72 	bl	8000f04 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff fb6e 	bl	8000f04 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1a3      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d038      	beq.n	80018c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d019      	beq.n	800188a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185a:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fb4f 	bl	8000f04 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186a:	f7ff fb4b 	bl	8000f04 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e180      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800187e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x23a>
 8001888:	e01a      	b.n	80018c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800188c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fb35 	bl	8000f04 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff fb31 	bl	8000f04 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d903      	bls.n	80018b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e166      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
 80018b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b4:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a4 	beq.w	8001a16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ce:	4b8c      	ldr	r3, [pc, #560]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10d      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b89      	ldr	r3, [pc, #548]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a88      	ldr	r2, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b86      	ldr	r3, [pc, #536]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f6:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <HAL_RCC_OscConfig+0x4d4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d118      	bne.n	8001934 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001902:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <HAL_RCC_OscConfig+0x4d4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0x4d4>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190e:	f7ff faf9 	bl	8000f04 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7ff faf5 	bl	8000f04 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b64      	cmp	r3, #100	; 0x64
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e12a      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001928:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x4d4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x31a>
 800193c:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a6f      	ldr	r2, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	e02d      	b.n	80019a6 <HAL_RCC_OscConfig+0x376>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x33c>
 8001952:	4b6b      	ldr	r3, [pc, #428]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a6a      	ldr	r2, [pc, #424]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a67      	ldr	r2, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	e01c      	b.n	80019a6 <HAL_RCC_OscConfig+0x376>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d10c      	bne.n	800198e <HAL_RCC_OscConfig+0x35e>
 8001974:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a61      	ldr	r2, [pc, #388]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	e00b      	b.n	80019a6 <HAL_RCC_OscConfig+0x376>
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a5b      	ldr	r2, [pc, #364]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d015      	beq.n	80019da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff faa9 	bl	8000f04 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff faa5 	bl	8000f04 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0d8      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019cc:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ee      	beq.n	80019b6 <HAL_RCC_OscConfig+0x386>
 80019d8:	e014      	b.n	8001a04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fa93 	bl	8000f04 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff fa8f 	bl	8000f04 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0c2      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ee      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a3c      	ldr	r2, [pc, #240]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80ae 	beq.w	8001b7c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a20:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d06d      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d14b      	bne.n	8001acc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fa60 	bl	8000f04 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff fa5c 	bl	8000f04 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e091      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	041b      	lsls	r3, r3, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	071b      	lsls	r3, r3, #28
 8001a92:	491b      	ldr	r1, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fa2e 	bl	8000f04 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff fa2a 	bl	8000f04 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e05f      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x47c>
 8001aca:	e057      	b.n	8001b7c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fa14 	bl	8000f04 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff fa10 	bl	8000f04 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e045      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4b0>
 8001afe:	e03d      	b.n	8001b7c <HAL_RCC_OscConfig+0x54c>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_RCC_OscConfig+0x558>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d030      	beq.n	8001b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d129      	bne.n	8001b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d122      	bne.n	8001b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d119      	bne.n	8001b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	3b01      	subs	r3, #1
 8001b52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d10f      	bne.n	8001b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0d0      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d910      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 020f 	bic.w	r2, r3, #15
 8001bba:	4965      	ldr	r1, [pc, #404]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0b8      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bec:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	494d      	ldr	r1, [pc, #308]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d040      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d115      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e07f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e073      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06b      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4936      	ldr	r1, [pc, #216]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c80:	f7ff f940 	bl	8000f04 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff f93c 	bl	8000f04 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e053      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d210      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 020f 	bic.w	r2, r3, #15
 8001cc6:	4922      	ldr	r1, [pc, #136]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e032      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4916      	ldr	r1, [pc, #88]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1e:	f000 f821 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	490a      	ldr	r1, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x1cc>)
 8001d30:	5ccb      	ldrb	r3, [r1, r3]
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1d0>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1d4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f802 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023c00 	.word	0x40023c00
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08006420 	.word	0x08006420
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d68:	b094      	sub	sp, #80	; 0x50
 8001d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d70:	2300      	movs	r3, #0
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d74:	2300      	movs	r3, #0
 8001d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7c:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d00d      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x40>
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	f200 80e1 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x34>
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d96:	e0db      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b73      	ldr	r3, [pc, #460]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d9c:	e0db      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001da2:	e0d8      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da4:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001dae:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	462b      	mov	r3, r5
 8001dda:	f04f 0000 	mov.w	r0, #0
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	0159      	lsls	r1, r3, #5
 8001de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de8:	0150      	lsls	r0, r2, #5
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4621      	mov	r1, r4
 8001df0:	1a51      	subs	r1, r2, r1
 8001df2:	6139      	str	r1, [r7, #16]
 8001df4:	4629      	mov	r1, r5
 8001df6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e08:	4659      	mov	r1, fp
 8001e0a:	018b      	lsls	r3, r1, #6
 8001e0c:	4651      	mov	r1, sl
 8001e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e12:	4651      	mov	r1, sl
 8001e14:	018a      	lsls	r2, r1, #6
 8001e16:	4651      	mov	r1, sl
 8001e18:	ebb2 0801 	subs.w	r8, r2, r1
 8001e1c:	4659      	mov	r1, fp
 8001e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e36:	4690      	mov	r8, r2
 8001e38:	4699      	mov	r9, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	eb18 0303 	adds.w	r3, r8, r3
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	462b      	mov	r3, r5
 8001e44:	eb49 0303 	adc.w	r3, r9, r3
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e56:	4629      	mov	r1, r5
 8001e58:	028b      	lsls	r3, r1, #10
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e60:	4621      	mov	r1, r4
 8001e62:	028a      	lsls	r2, r1, #10
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e74:	f7fe f9e4 	bl	8000240 <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e80:	e058      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	099b      	lsrs	r3, r3, #6
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	f04f 0000 	mov.w	r0, #0
 8001ea4:	f04f 0100 	mov.w	r1, #0
 8001ea8:	0159      	lsls	r1, r3, #5
 8001eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eae:	0150      	lsls	r0, r2, #5
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eba:	4649      	mov	r1, r9
 8001ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	00eb      	lsls	r3, r5, #3
 8001ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eea:	00e2      	lsls	r2, r4, #3
 8001eec:	4614      	mov	r4, r2
 8001eee:	461d      	mov	r5, r3
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	18e3      	adds	r3, r4, r3
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	eb45 0303 	adc.w	r3, r5, r3
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	028b      	lsls	r3, r1, #10
 8001f0e:	4621      	mov	r1, r4
 8001f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f14:	4621      	mov	r1, r4
 8001f16:	028a      	lsls	r2, r1, #10
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	61fa      	str	r2, [r7, #28]
 8001f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f28:	f7fe f98a 	bl	8000240 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f4e:	e002      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3750      	adds	r7, #80	; 0x50
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	00f42400 	.word	0x00f42400

08001f6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08006430 	.word	0x08006430

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb0:	f7ff ffdc 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	08006430 	.word	0x08006430

08001fd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_RCC_GetClockConfig+0x5c>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCC_GetClockConfig+0x5c>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_GetClockConfig+0x5c>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_RCC_GetClockConfig+0x60>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 020f 	and.w	r2, r3, #15
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40023c00 	.word	0x40023c00

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002060:	4b69      	ldr	r3, [pc, #420]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a68      	ldr	r2, [pc, #416]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800206a:	6093      	str	r3, [r2, #8]
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	4964      	ldr	r1, [pc, #400]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d017      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002092:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	4959      	ldr	r1, [pc, #356]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020b0:	d101      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d017      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	494a      	ldr	r1, [pc, #296]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 808b 	beq.w	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a39      	ldr	r2, [pc, #228]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
 8002128:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a34      	ldr	r2, [pc, #208]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002140:	f7fe fee0 	bl	8000f04 <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe fedc 	bl	8000f04 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e38f      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002166:	4b28      	ldr	r3, [pc, #160]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d035      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d02e      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d114      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fea4 	bl	8000f04 <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe fea0 	bl	8000f04 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e351      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ee      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ee:	d111      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021fe:	400b      	ands	r3, r1
 8002200:	4901      	ldr	r1, [pc, #4]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
 8002206:	e00b      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000
 8002210:	0ffffcff 	.word	0x0ffffcff
 8002214:	4bac      	ldr	r3, [pc, #688]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4aab      	ldr	r2, [pc, #684]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800221e:	6093      	str	r3, [r2, #8]
 8002220:	4ba9      	ldr	r3, [pc, #676]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002222:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	49a6      	ldr	r1, [pc, #664]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	4313      	orrs	r3, r2
 8002230:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800223e:	4ba2      	ldr	r3, [pc, #648]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002244:	4aa0      	ldr	r2, [pc, #640]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800224e:	4b9e      	ldr	r3, [pc, #632]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	499b      	ldr	r1, [pc, #620]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226c:	4b96      	ldr	r3, [pc, #600]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800227a:	4993      	ldr	r1, [pc, #588]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228e:	4b8e      	ldr	r3, [pc, #568]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800229c:	498a      	ldr	r1, [pc, #552]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b0:	4b85      	ldr	r3, [pc, #532]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022be:	4982      	ldr	r1, [pc, #520]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022d2:	4b7d      	ldr	r3, [pc, #500]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4979      	ldr	r1, [pc, #484]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f4:	4b74      	ldr	r3, [pc, #464]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4971      	ldr	r1, [pc, #452]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002316:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	f023 020c 	bic.w	r2, r3, #12
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	4968      	ldr	r1, [pc, #416]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002338:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	4960      	ldr	r1, [pc, #384]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800235a:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002368:	4957      	ldr	r1, [pc, #348]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800237c:	4b52      	ldr	r3, [pc, #328]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	494f      	ldr	r1, [pc, #316]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	4946      	ldr	r1, [pc, #280]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023c0:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	493e      	ldr	r1, [pc, #248]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023e2:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	4935      	ldr	r1, [pc, #212]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002412:	492d      	ldr	r1, [pc, #180]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002434:	4924      	ldr	r1, [pc, #144]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002444:	d101      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002474:	4914      	ldr	r1, [pc, #80]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002498:	490b      	ldr	r1, [pc, #44]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00f      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024bc:	4902      	ldr	r1, [pc, #8]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024c4:	e002      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024d8:	4b8a      	ldr	r3, [pc, #552]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	4986      	ldr	r1, [pc, #536]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024fc:	4b81      	ldr	r3, [pc, #516]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002502:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800250c:	497d      	ldr	r1, [pc, #500]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d006      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80d6 	beq.w	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002528:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a75      	ldr	r2, [pc, #468]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002534:	f7fe fce6 	bl	8000f04 <HAL_GetTick>
 8002538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800253c:	f7fe fce2 	bl	8000f04 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e195      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254e:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d021      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11d      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800256e:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800257c:	4b61      	ldr	r3, [pc, #388]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002582:	0e1b      	lsrs	r3, r3, #24
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	019a      	lsls	r2, r3, #6
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	071b      	lsls	r3, r3, #28
 80025a2:	4958      	ldr	r1, [pc, #352]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02e      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d4:	d129      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025d6:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025e4:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ea:	0f1b      	lsrs	r3, r3, #28
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	019a      	lsls	r2, r3, #6
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	071b      	lsls	r3, r3, #28
 800260a:	493e      	ldr	r1, [pc, #248]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002618:	f023 021f 	bic.w	r2, r3, #31
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	3b01      	subs	r3, #1
 8002622:	4938      	ldr	r1, [pc, #224]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01d      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	0e1b      	lsrs	r3, r3, #24
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264a:	0f1b      	lsrs	r3, r3, #28
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	019a      	lsls	r2, r3, #6
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	061b      	lsls	r3, r3, #24
 8002664:	431a      	orrs	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	071b      	lsls	r3, r3, #28
 800266a:	4926      	ldr	r1, [pc, #152]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d011      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	019a      	lsls	r2, r3, #6
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	491a      	ldr	r1, [pc, #104]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ae:	f7fe fc29 	bl	8000f04 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026b6:	f7fe fc25 	bl	8000f04 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	; 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0d8      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 80ce 	bne.w	8002878 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a08      	ldr	r2, [pc, #32]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e8:	f7fe fc0c 	bl	8000f04 <HAL_GetTick>
 80026ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026ee:	e00b      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026f0:	f7fe fc08 	bl	8000f04 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d904      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0bb      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d0ec      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02e      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d12a      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800273e:	4b51      	ldr	r3, [pc, #324]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	0f1b      	lsrs	r3, r3, #28
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	071b      	lsls	r3, r3, #28
 8002772:	4944      	ldr	r1, [pc, #272]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002780:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	3b01      	subs	r3, #1
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	493d      	ldr	r1, [pc, #244]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d022      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a8:	d11d      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	0e1b      	lsrs	r3, r3, #24
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	0f1b      	lsrs	r3, r3, #28
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	019a      	lsls	r2, r3, #6
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	4929      	ldr	r1, [pc, #164]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d028      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	0e1b      	lsrs	r3, r3, #24
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	019a      	lsls	r2, r3, #6
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	431a      	orrs	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	071b      	lsls	r3, r3, #28
 8002826:	4917      	ldr	r1, [pc, #92]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	4911      	ldr	r1, [pc, #68]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe fb58 	bl	8000f04 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002858:	f7fe fb54 	bl	8000f04 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e007      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002876:	d1ef      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e049      	b.n	800292e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f841 	bl	8002936 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f000 fa00 	bl	8002ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d001      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e054      	b.n	8002a0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_TIM_Base_Start_IT+0xd0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298e:	d01d      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <HAL_TIM_Base_Start_IT+0xd4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d018      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00e      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1e      	ldr	r2, [pc, #120]	; (8002a2c <HAL_TIM_Base_Start_IT+0xe0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_TIM_Base_Start_IT+0xe4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <HAL_TIM_Base_Start_IT+0xe8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d115      	bne.n	80029f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_TIM_Base_Start_IT+0xec>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d015      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0xbe>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d011      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	e008      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e000      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40014000 	.word	0x40014000
 8002a34:	40001800 	.word	0x40001800
 8002a38:	00010007 	.word	0x00010007

08002a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0202 	mvn.w	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f905 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8f7 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f908 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0204 	mvn.w	r2, #4
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8db 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8cd 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8de 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0208 	mvn.w	r2, #8
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2204      	movs	r2, #4
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8b1 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8a3 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f8b4 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0210 	mvn.w	r2, #16
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f887 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f879 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f88a 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0201 	mvn.w	r2, #1
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe f81c 	bl	8000bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f91a 	bl	8002e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfa:	d10e      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f90d 	bl	8002e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d10e      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f838 	bl	8002cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d10e      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0220 	mvn.w	r2, #32
 8002c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8cd 	bl	8002e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a40      	ldr	r2, [pc, #256]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d013      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d00f      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3d      	ldr	r2, [pc, #244]	; (8002de4 <TIM_Base_SetConfig+0x118>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <TIM_Base_SetConfig+0x11c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3b      	ldr	r2, [pc, #236]	; (8002dec <TIM_Base_SetConfig+0x120>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <TIM_Base_SetConfig+0x124>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d108      	bne.n	8002d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d027      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2c      	ldr	r2, [pc, #176]	; (8002de4 <TIM_Base_SetConfig+0x118>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d023      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <TIM_Base_SetConfig+0x11c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2a      	ldr	r2, [pc, #168]	; (8002dec <TIM_Base_SetConfig+0x120>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <TIM_Base_SetConfig+0x124>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d017      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <TIM_Base_SetConfig+0x128>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <TIM_Base_SetConfig+0x12c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <TIM_Base_SetConfig+0x130>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <TIM_Base_SetConfig+0x134>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <TIM_Base_SetConfig+0x138>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <TIM_Base_SetConfig+0x13c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_Base_SetConfig+0xf8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <TIM_Base_SetConfig+0x124>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40010400 	.word	0x40010400
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40014800 	.word	0x40014800
 8002e00:	40001800 	.word	0x40001800
 8002e04:	40001c00 	.word	0x40001c00
 8002e08:	40002000 	.word	0x40002000

08002e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e040      	b.n	8002edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd ff04 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fbf2 	bl	8003670 <UART_SetConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e022      	b.n	8002edc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fe4a 	bl	8003b38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fed1 	bl	8003c7c <UART_CheckIdleState>
 8002eda:	4603      	mov	r3, r0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b08b      	sub	sp, #44	; 0x2c
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d156      	bne.n	8002fa8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_UART_Transmit_IT+0x22>
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e04f      	b.n	8002faa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_UART_Transmit_IT+0x34>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e048      	b.n	8002faa <HAL_UART_Transmit_IT+0xc6>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f52:	d107      	bne.n	8002f64 <HAL_UART_Transmit_IT+0x80>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d103      	bne.n	8002f64 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <HAL_UART_Transmit_IT+0xd4>)
 8002f60:	669a      	str	r2, [r3, #104]	; 0x68
 8002f62:	e002      	b.n	8002f6a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_UART_Transmit_IT+0xd8>)
 8002f68:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	623b      	str	r3, [r7, #32]
 8002f92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	69f9      	ldr	r1, [r7, #28]
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e6      	bne.n	8002f72 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	372c      	adds	r7, #44	; 0x2c
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	080041d5 	.word	0x080041d5
 8002fbc:	0800411f 	.word	0x0800411f

08002fc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d13d      	bne.n	8003052 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_UART_Receive_IT+0x22>
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e036      	b.n	8003054 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Receive_IT+0x34>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e02f      	b.n	8003054 <HAL_UART_Receive_IT+0x94>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d018      	beq.n	8003042 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	613b      	str	r3, [r7, #16]
   return(result);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	69f9      	ldr	r1, [r7, #28]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	61bb      	str	r3, [r7, #24]
   return(result);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e6      	bne.n	8003010 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	461a      	mov	r2, r3
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 ff25 	bl	8003e98 <UART_Start_Receive_IT>
 800304e:	4603      	mov	r3, r0
 8003050:	e000      	b.n	8003054 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
  }
}
 8003054:	4618      	mov	r0, r3
 8003056:	3728      	adds	r7, #40	; 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0ba      	sub	sp, #232	; 0xe8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003082:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003086:	f640 030f 	movw	r3, #2063	; 0x80f
 800308a:	4013      	ands	r3, r2
 800308c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003090:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d115      	bne.n	80030c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00f      	beq.n	80030c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 82a4 	beq.w	8003602 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
      }
      return;
 80030c2:	e29e      	b.n	8003602 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8117 	beq.w	80032fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030de:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_UART_IRQHandler+0x298>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 810a 	beq.w	80032fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d011      	beq.n	8003118 <HAL_UART_IRQHandler+0xbc>
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d011      	beq.n	8003148 <HAL_UART_IRQHandler+0xec>
 8003124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2202      	movs	r2, #2
 8003136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <HAL_UART_IRQHandler+0x11c>
 8003154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2204      	movs	r2, #4
 8003166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316e:	f043 0202 	orr.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003194:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2208      	movs	r2, #8
 80031a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031aa:	f043 0208 	orr.w	r2, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <HAL_UART_IRQHandler+0x18a>
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 820a 	beq.w	8003606 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00d      	beq.n	800321a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d005      	beq.n	800323e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003236:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800323a:	2b00      	cmp	r3, #0
 800323c:	d04f      	beq.n	80032de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fef4 	bl	800402c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d141      	bne.n	80032d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3308      	adds	r3, #8
 8003258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800326c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3308      	adds	r3, #8
 800327a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800327e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800328a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1d9      	bne.n	8003252 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d013      	beq.n	80032ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <HAL_UART_IRQHandler+0x29c>)
 80032ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd ff84 	bl	80011c0 <HAL_DMA_Abort_IT>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d017      	beq.n	80032ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80032c8:	4610      	mov	r0, r2
 80032ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	e00f      	b.n	80032ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f9ae 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	e00b      	b.n	80032ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9aa 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	e007      	b.n	80032ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f9a6 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032ec:	e18b      	b.n	8003606 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ee:	bf00      	nop
    return;
 80032f0:	e189      	b.n	8003606 <HAL_UART_IRQHandler+0x5aa>
 80032f2:	bf00      	nop
 80032f4:	04000120 	.word	0x04000120
 80032f8:	080040f3 	.word	0x080040f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003300:	2b01      	cmp	r3, #1
 8003302:	f040 8144 	bne.w	800358e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 813d 	beq.w	800358e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8136 	beq.w	800358e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2210      	movs	r2, #16
 8003328:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	f040 80b2 	bne.w	800349e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003346:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 815d 	beq.w	800360a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800335a:	429a      	cmp	r2, r3
 800335c:	f080 8155 	bcs.w	800360a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003366:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003374:	f000 8085 	beq.w	8003482 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800338c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1da      	bne.n	8003378 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3308      	adds	r3, #8
 80033e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e1      	bne.n	80033c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3308      	adds	r3, #8
 8003404:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800340e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3308      	adds	r3, #8
 800341e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003422:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003428:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e3      	bne.n	80033fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003452:	f023 0310 	bic.w	r3, r3, #16
 8003456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003464:	65bb      	str	r3, [r7, #88]	; 0x58
 8003466:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800346a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e4      	bne.n	8003442 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fe2f 	bl	80010e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800348e:	b29b      	uxth	r3, r3
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	b29b      	uxth	r3, r3
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8d4 	bl	8003644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800349c:	e0b5      	b.n	800360a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80a7 	beq.w	800360e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80034c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80a2 	beq.w	800360e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e4      	bne.n	80034ca <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	623b      	str	r3, [r7, #32]
   return(result);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3308      	adds	r3, #8
 8003520:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003524:	633a      	str	r2, [r7, #48]	; 0x30
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800352a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e3      	bne.n	8003500 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	60fb      	str	r3, [r7, #12]
   return(result);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0310 	bic.w	r3, r3, #16
 800355e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	617b      	str	r3, [r7, #20]
   return(result);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e4      	bne.n	800354a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f85c 	bl	8003644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800358c:	e03f      	b.n	800360e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800358e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00e      	beq.n	80035b8 <HAL_UART_IRQHandler+0x55c>
 800359a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f853 	bl	800365c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035b6:	e02d      	b.n	8003614 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01c      	beq.n	8003612 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
    }
    return;
 80035e0:	e017      	b.n	8003612 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <HAL_UART_IRQHandler+0x5b8>
 80035ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fe4a 	bl	8004294 <UART_EndTransmit_IT>
    return;
 8003600:	e008      	b.n	8003614 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003602:	bf00      	nop
 8003604:	e006      	b.n	8003614 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003606:	bf00      	nop
 8003608:	e004      	b.n	8003614 <HAL_UART_IRQHandler+0x5b8>
      return;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <HAL_UART_IRQHandler+0x5b8>
      return;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003612:	bf00      	nop
  }

}
 8003614:	37e8      	adds	r7, #232	; 0xe8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop

0800361c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4ba6      	ldr	r3, [pc, #664]	; (8003934 <UART_SetConfig+0x2c4>)
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6979      	ldr	r1, [r7, #20]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a94      	ldr	r2, [pc, #592]	; (8003938 <UART_SetConfig+0x2c8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d120      	bne.n	800372e <UART_SetConfig+0xbe>
 80036ec:	4b93      	ldr	r3, [pc, #588]	; (800393c <UART_SetConfig+0x2cc>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d816      	bhi.n	8003728 <UART_SetConfig+0xb8>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0x90>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003711 	.word	0x08003711
 8003704:	0800371d 	.word	0x0800371d
 8003708:	08003717 	.word	0x08003717
 800370c:	08003723 	.word	0x08003723
 8003710:	2301      	movs	r3, #1
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e150      	b.n	80039b8 <UART_SetConfig+0x348>
 8003716:	2302      	movs	r3, #2
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e14d      	b.n	80039b8 <UART_SetConfig+0x348>
 800371c:	2304      	movs	r3, #4
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e14a      	b.n	80039b8 <UART_SetConfig+0x348>
 8003722:	2308      	movs	r3, #8
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e147      	b.n	80039b8 <UART_SetConfig+0x348>
 8003728:	2310      	movs	r3, #16
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e144      	b.n	80039b8 <UART_SetConfig+0x348>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a83      	ldr	r2, [pc, #524]	; (8003940 <UART_SetConfig+0x2d0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d132      	bne.n	800379e <UART_SetConfig+0x12e>
 8003738:	4b80      	ldr	r3, [pc, #512]	; (800393c <UART_SetConfig+0x2cc>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d828      	bhi.n	8003798 <UART_SetConfig+0x128>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <UART_SetConfig+0xdc>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	08003781 	.word	0x08003781
 8003750:	08003799 	.word	0x08003799
 8003754:	08003799 	.word	0x08003799
 8003758:	08003799 	.word	0x08003799
 800375c:	0800378d 	.word	0x0800378d
 8003760:	08003799 	.word	0x08003799
 8003764:	08003799 	.word	0x08003799
 8003768:	08003799 	.word	0x08003799
 800376c:	08003787 	.word	0x08003787
 8003770:	08003799 	.word	0x08003799
 8003774:	08003799 	.word	0x08003799
 8003778:	08003799 	.word	0x08003799
 800377c:	08003793 	.word	0x08003793
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e118      	b.n	80039b8 <UART_SetConfig+0x348>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e115      	b.n	80039b8 <UART_SetConfig+0x348>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e112      	b.n	80039b8 <UART_SetConfig+0x348>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e10f      	b.n	80039b8 <UART_SetConfig+0x348>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e10c      	b.n	80039b8 <UART_SetConfig+0x348>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a68      	ldr	r2, [pc, #416]	; (8003944 <UART_SetConfig+0x2d4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d120      	bne.n	80037ea <UART_SetConfig+0x17a>
 80037a8:	4b64      	ldr	r3, [pc, #400]	; (800393c <UART_SetConfig+0x2cc>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037b2:	2b30      	cmp	r3, #48	; 0x30
 80037b4:	d013      	beq.n	80037de <UART_SetConfig+0x16e>
 80037b6:	2b30      	cmp	r3, #48	; 0x30
 80037b8:	d814      	bhi.n	80037e4 <UART_SetConfig+0x174>
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d009      	beq.n	80037d2 <UART_SetConfig+0x162>
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d810      	bhi.n	80037e4 <UART_SetConfig+0x174>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <UART_SetConfig+0x15c>
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d006      	beq.n	80037d8 <UART_SetConfig+0x168>
 80037ca:	e00b      	b.n	80037e4 <UART_SetConfig+0x174>
 80037cc:	2300      	movs	r3, #0
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e0f2      	b.n	80039b8 <UART_SetConfig+0x348>
 80037d2:	2302      	movs	r3, #2
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e0ef      	b.n	80039b8 <UART_SetConfig+0x348>
 80037d8:	2304      	movs	r3, #4
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e0ec      	b.n	80039b8 <UART_SetConfig+0x348>
 80037de:	2308      	movs	r3, #8
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e0e9      	b.n	80039b8 <UART_SetConfig+0x348>
 80037e4:	2310      	movs	r3, #16
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e0e6      	b.n	80039b8 <UART_SetConfig+0x348>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a56      	ldr	r2, [pc, #344]	; (8003948 <UART_SetConfig+0x2d8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d120      	bne.n	8003836 <UART_SetConfig+0x1c6>
 80037f4:	4b51      	ldr	r3, [pc, #324]	; (800393c <UART_SetConfig+0x2cc>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003800:	d013      	beq.n	800382a <UART_SetConfig+0x1ba>
 8003802:	2bc0      	cmp	r3, #192	; 0xc0
 8003804:	d814      	bhi.n	8003830 <UART_SetConfig+0x1c0>
 8003806:	2b80      	cmp	r3, #128	; 0x80
 8003808:	d009      	beq.n	800381e <UART_SetConfig+0x1ae>
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d810      	bhi.n	8003830 <UART_SetConfig+0x1c0>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <UART_SetConfig+0x1a8>
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d006      	beq.n	8003824 <UART_SetConfig+0x1b4>
 8003816:	e00b      	b.n	8003830 <UART_SetConfig+0x1c0>
 8003818:	2300      	movs	r3, #0
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e0cc      	b.n	80039b8 <UART_SetConfig+0x348>
 800381e:	2302      	movs	r3, #2
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e0c9      	b.n	80039b8 <UART_SetConfig+0x348>
 8003824:	2304      	movs	r3, #4
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e0c6      	b.n	80039b8 <UART_SetConfig+0x348>
 800382a:	2308      	movs	r3, #8
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e0c3      	b.n	80039b8 <UART_SetConfig+0x348>
 8003830:	2310      	movs	r3, #16
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e0c0      	b.n	80039b8 <UART_SetConfig+0x348>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a44      	ldr	r2, [pc, #272]	; (800394c <UART_SetConfig+0x2dc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d125      	bne.n	800388c <UART_SetConfig+0x21c>
 8003840:	4b3e      	ldr	r3, [pc, #248]	; (800393c <UART_SetConfig+0x2cc>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800384e:	d017      	beq.n	8003880 <UART_SetConfig+0x210>
 8003850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003854:	d817      	bhi.n	8003886 <UART_SetConfig+0x216>
 8003856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385a:	d00b      	beq.n	8003874 <UART_SetConfig+0x204>
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d811      	bhi.n	8003886 <UART_SetConfig+0x216>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <UART_SetConfig+0x1fe>
 8003866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386a:	d006      	beq.n	800387a <UART_SetConfig+0x20a>
 800386c:	e00b      	b.n	8003886 <UART_SetConfig+0x216>
 800386e:	2300      	movs	r3, #0
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e0a1      	b.n	80039b8 <UART_SetConfig+0x348>
 8003874:	2302      	movs	r3, #2
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e09e      	b.n	80039b8 <UART_SetConfig+0x348>
 800387a:	2304      	movs	r3, #4
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e09b      	b.n	80039b8 <UART_SetConfig+0x348>
 8003880:	2308      	movs	r3, #8
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e098      	b.n	80039b8 <UART_SetConfig+0x348>
 8003886:	2310      	movs	r3, #16
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e095      	b.n	80039b8 <UART_SetConfig+0x348>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2f      	ldr	r2, [pc, #188]	; (8003950 <UART_SetConfig+0x2e0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d125      	bne.n	80038e2 <UART_SetConfig+0x272>
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <UART_SetConfig+0x2cc>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038a4:	d017      	beq.n	80038d6 <UART_SetConfig+0x266>
 80038a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038aa:	d817      	bhi.n	80038dc <UART_SetConfig+0x26c>
 80038ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b0:	d00b      	beq.n	80038ca <UART_SetConfig+0x25a>
 80038b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b6:	d811      	bhi.n	80038dc <UART_SetConfig+0x26c>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <UART_SetConfig+0x254>
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d006      	beq.n	80038d0 <UART_SetConfig+0x260>
 80038c2:	e00b      	b.n	80038dc <UART_SetConfig+0x26c>
 80038c4:	2301      	movs	r3, #1
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e076      	b.n	80039b8 <UART_SetConfig+0x348>
 80038ca:	2302      	movs	r3, #2
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e073      	b.n	80039b8 <UART_SetConfig+0x348>
 80038d0:	2304      	movs	r3, #4
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e070      	b.n	80039b8 <UART_SetConfig+0x348>
 80038d6:	2308      	movs	r3, #8
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e06d      	b.n	80039b8 <UART_SetConfig+0x348>
 80038dc:	2310      	movs	r3, #16
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e06a      	b.n	80039b8 <UART_SetConfig+0x348>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <UART_SetConfig+0x2e4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d138      	bne.n	800395e <UART_SetConfig+0x2ee>
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <UART_SetConfig+0x2cc>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038fa:	d017      	beq.n	800392c <UART_SetConfig+0x2bc>
 80038fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003900:	d82a      	bhi.n	8003958 <UART_SetConfig+0x2e8>
 8003902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003906:	d00b      	beq.n	8003920 <UART_SetConfig+0x2b0>
 8003908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390c:	d824      	bhi.n	8003958 <UART_SetConfig+0x2e8>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <UART_SetConfig+0x2aa>
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003916:	d006      	beq.n	8003926 <UART_SetConfig+0x2b6>
 8003918:	e01e      	b.n	8003958 <UART_SetConfig+0x2e8>
 800391a:	2300      	movs	r3, #0
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e04b      	b.n	80039b8 <UART_SetConfig+0x348>
 8003920:	2302      	movs	r3, #2
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e048      	b.n	80039b8 <UART_SetConfig+0x348>
 8003926:	2304      	movs	r3, #4
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e045      	b.n	80039b8 <UART_SetConfig+0x348>
 800392c:	2308      	movs	r3, #8
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e042      	b.n	80039b8 <UART_SetConfig+0x348>
 8003932:	bf00      	nop
 8003934:	efff69f3 	.word	0xefff69f3
 8003938:	40011000 	.word	0x40011000
 800393c:	40023800 	.word	0x40023800
 8003940:	40004400 	.word	0x40004400
 8003944:	40004800 	.word	0x40004800
 8003948:	40004c00 	.word	0x40004c00
 800394c:	40005000 	.word	0x40005000
 8003950:	40011400 	.word	0x40011400
 8003954:	40007800 	.word	0x40007800
 8003958:	2310      	movs	r3, #16
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e02c      	b.n	80039b8 <UART_SetConfig+0x348>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a72      	ldr	r2, [pc, #456]	; (8003b2c <UART_SetConfig+0x4bc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d125      	bne.n	80039b4 <UART_SetConfig+0x344>
 8003968:	4b71      	ldr	r3, [pc, #452]	; (8003b30 <UART_SetConfig+0x4c0>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003972:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003976:	d017      	beq.n	80039a8 <UART_SetConfig+0x338>
 8003978:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800397c:	d817      	bhi.n	80039ae <UART_SetConfig+0x33e>
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	d00b      	beq.n	800399c <UART_SetConfig+0x32c>
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003988:	d811      	bhi.n	80039ae <UART_SetConfig+0x33e>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <UART_SetConfig+0x326>
 800398e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003992:	d006      	beq.n	80039a2 <UART_SetConfig+0x332>
 8003994:	e00b      	b.n	80039ae <UART_SetConfig+0x33e>
 8003996:	2300      	movs	r3, #0
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e00d      	b.n	80039b8 <UART_SetConfig+0x348>
 800399c:	2302      	movs	r3, #2
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e00a      	b.n	80039b8 <UART_SetConfig+0x348>
 80039a2:	2304      	movs	r3, #4
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e007      	b.n	80039b8 <UART_SetConfig+0x348>
 80039a8:	2308      	movs	r3, #8
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e004      	b.n	80039b8 <UART_SetConfig+0x348>
 80039ae:	2310      	movs	r3, #16
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e001      	b.n	80039b8 <UART_SetConfig+0x348>
 80039b4:	2310      	movs	r3, #16
 80039b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c0:	d15b      	bne.n	8003a7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d828      	bhi.n	8003a1a <UART_SetConfig+0x3aa>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <UART_SetConfig+0x360>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a1b 	.word	0x08003a1b
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a1b 	.word	0x08003a1b
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7fe fac6 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 80039f8:	61b8      	str	r0, [r7, #24]
        break;
 80039fa:	e013      	b.n	8003a24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe fad6 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 8003a00:	61b8      	str	r0, [r7, #24]
        break;
 8003a02:	e00f      	b.n	8003a24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <UART_SetConfig+0x4c4>)
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e00c      	b.n	8003a24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe f9ab 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003a0e:	61b8      	str	r0, [r7, #24]
        break;
 8003a10:	e008      	b.n	8003a24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e004      	b.n	8003a24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	77bb      	strb	r3, [r7, #30]
        break;
 8003a22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d074      	beq.n	8003b14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	005a      	lsls	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	441a      	add	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	d916      	bls.n	8003a74 <UART_SetConfig+0x404>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d212      	bcs.n	8003a74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f023 030f 	bic.w	r3, r3, #15
 8003a56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	89fa      	ldrh	r2, [r7, #14]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	e04f      	b.n	8003b14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	77bb      	strb	r3, [r7, #30]
 8003a78:	e04c      	b.n	8003b14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d828      	bhi.n	8003ad2 <UART_SetConfig+0x462>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <UART_SetConfig+0x418>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003ad3 	.word	0x08003ad3
 8003a98:	08003ac3 	.word	0x08003ac3
 8003a9c:	08003ad3 	.word	0x08003ad3
 8003aa0:	08003ad3 	.word	0x08003ad3
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003acb 	.word	0x08003acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7fe fa6a 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	61b8      	str	r0, [r7, #24]
        break;
 8003ab2:	e013      	b.n	8003adc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7fe fa7a 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 8003ab8:	61b8      	str	r0, [r7, #24]
        break;
 8003aba:	e00f      	b.n	8003adc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003abc:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <UART_SetConfig+0x4c4>)
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e00c      	b.n	8003adc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe f94f 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003ac6:	61b8      	str	r0, [r7, #24]
        break;
 8003ac8:	e008      	b.n	8003adc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e004      	b.n	8003adc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77bb      	strb	r3, [r7, #30]
        break;
 8003ada:	bf00      	nop
    }

    if (pclk != 0U)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085a      	lsrs	r2, r3, #1
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	441a      	add	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b0f      	cmp	r3, #15
 8003afa:	d909      	bls.n	8003b10 <UART_SetConfig+0x4a0>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d205      	bcs.n	8003b10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	e001      	b.n	8003b14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40007c00 	.word	0x40007c00
 8003b30:	40023800 	.word	0x40023800
 8003b34:	00f42400 	.word	0x00f42400

08003b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01a      	beq.n	8003c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c36:	d10a      	bne.n	8003c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c8c:	f7fd f93a 	bl	8000f04 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d10e      	bne.n	8003cbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f82d 	bl	8003d0e <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e023      	b.n	8003d06 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d10e      	bne.n	8003cea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f817 	bl	8003d0e <UART_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e00d      	b.n	8003d06 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b09c      	sub	sp, #112	; 0x70
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1e:	e0a5      	b.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	f000 80a1 	beq.w	8003e6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fd f8eb 	bl	8000f04 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d13e      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d54:	667b      	str	r3, [r7, #100]	; 0x64
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e6      	bne.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3308      	adds	r3, #8
 8003d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	663b      	str	r3, [r7, #96]	; 0x60
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e5      	bne.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e067      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d04f      	beq.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dda:	d147      	bne.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
 8003e06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e6      	bne.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	613b      	str	r3, [r7, #16]
   return(result);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e38:	623a      	str	r2, [r7, #32]
 8003e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	69f9      	ldr	r1, [r7, #28]
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e5      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e010      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69da      	ldr	r2, [r3, #28]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	f43f af4a 	beq.w	8003d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3770      	adds	r7, #112	; 0x70
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b097      	sub	sp, #92	; 0x5c
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eca:	d10e      	bne.n	8003eea <UART_Start_Receive_IT+0x52>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <UART_Start_Receive_IT+0x48>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003eda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ede:	e02d      	b.n	8003f3c <UART_Start_Receive_IT+0xa4>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee8:	e028      	b.n	8003f3c <UART_Start_Receive_IT+0xa4>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10d      	bne.n	8003f0e <UART_Start_Receive_IT+0x76>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <UART_Start_Receive_IT+0x6c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	22ff      	movs	r2, #255	; 0xff
 8003efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f02:	e01b      	b.n	8003f3c <UART_Start_Receive_IT+0xa4>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	227f      	movs	r2, #127	; 0x7f
 8003f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f0c:	e016      	b.n	8003f3c <UART_Start_Receive_IT+0xa4>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f16:	d10d      	bne.n	8003f34 <UART_Start_Receive_IT+0x9c>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <UART_Start_Receive_IT+0x92>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	227f      	movs	r2, #127	; 0x7f
 8003f24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f28:	e008      	b.n	8003f3c <UART_Start_Receive_IT+0xa4>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	223f      	movs	r2, #63	; 0x3f
 8003f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f32:	e003      	b.n	8003f3c <UART_Start_Receive_IT+0xa4>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2222      	movs	r2, #34	; 0x22
 8003f48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	657b      	str	r3, [r7, #84]	; 0x54
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3308      	adds	r3, #8
 8003f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e5      	bne.n	8003f4a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d107      	bne.n	8003f98 <UART_Start_Receive_IT+0x100>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d103      	bne.n	8003f98 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a24      	ldr	r2, [pc, #144]	; (8004024 <UART_Start_Receive_IT+0x18c>)
 8003f94:	665a      	str	r2, [r3, #100]	; 0x64
 8003f96:	e002      	b.n	8003f9e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a23      	ldr	r2, [pc, #140]	; (8004028 <UART_Start_Receive_IT+0x190>)
 8003f9c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d019      	beq.n	8003fe2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e6      	bne.n	8003fae <UART_Start_Receive_IT+0x116>
 8003fe0:	e018      	b.n	8004014 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f043 0320 	orr.w	r3, r3, #32
 8003ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	61bb      	str	r3, [r7, #24]
   return(result);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	375c      	adds	r7, #92	; 0x5c
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	08004445 	.word	0x08004445
 8004028:	080042e9 	.word	0x080042e9

0800402c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b095      	sub	sp, #84	; 0x54
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004052:	643b      	str	r3, [r7, #64]	; 0x40
 8004054:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e6      	bne.n	8004034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3308      	adds	r3, #8
 800406c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	61fb      	str	r3, [r7, #28]
   return(result);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	64bb      	str	r3, [r7, #72]	; 0x48
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3308      	adds	r3, #8
 8004084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800408c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e5      	bne.n	8004066 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d118      	bne.n	80040d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f023 0310 	bic.w	r3, r3, #16
 80040b6:	647b      	str	r3, [r7, #68]	; 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6979      	ldr	r1, [r7, #20]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	613b      	str	r3, [r7, #16]
   return(result);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040e6:	bf00      	nop
 80040e8:	3754      	adds	r7, #84	; 0x54
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff fa8d 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800411e:	b480      	push	{r7}
 8004120:	b08f      	sub	sp, #60	; 0x3c
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412a:	2b21      	cmp	r3, #33	; 0x21
 800412c:	d14c      	bne.n	80041c8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d132      	bne.n	80041a0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	61fb      	str	r3, [r7, #28]
   return(result);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	60bb      	str	r3, [r7, #8]
   return(result);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6979      	ldr	r1, [r7, #20]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	613b      	str	r3, [r7, #16]
   return(result);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e6      	bne.n	800416c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800419e:	e013      	b.n	80041c8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041c8:	bf00      	nop
 80041ca:	373c      	adds	r7, #60	; 0x3c
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b091      	sub	sp, #68	; 0x44
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e0:	2b21      	cmp	r3, #33	; 0x21
 80041e2:	d151      	bne.n	8004288 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d132      	bne.n	8004256 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	623b      	str	r3, [r7, #32]
   return(result);
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004204:	63bb      	str	r3, [r7, #56]	; 0x38
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
 8004210:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e6      	bne.n	80041f0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e6      	bne.n	8004222 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004254:	e018      	b.n	8004288 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004270:	1c9a      	adds	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004288:	bf00      	nop
 800428a:	3744      	adds	r7, #68	; 0x44
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6979      	ldr	r1, [r7, #20]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	613b      	str	r3, [r7, #16]
   return(result);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e6      	bne.n	800429c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff f99e 	bl	800361c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e0:	bf00      	nop
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b096      	sub	sp, #88	; 0x58
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042fe:	2b22      	cmp	r3, #34	; 0x22
 8004300:	f040 8094 	bne.w	800442c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800430e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004312:	b2d9      	uxtb	r1, r3
 8004314:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004318:	b2da      	uxtb	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	400a      	ands	r2, r1
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d177      	bne.n	800443c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004360:	653b      	str	r3, [r7, #80]	; 0x50
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436a:	647b      	str	r3, [r7, #68]	; 0x44
 800436c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e6      	bne.n	800434c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	623b      	str	r3, [r7, #32]
   return(result);
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439e:	633a      	str	r2, [r7, #48]	; 0x30
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d12e      	bne.n	8004424 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f023 0310 	bic.w	r3, r3, #16
 80043e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	69b9      	ldr	r1, [r7, #24]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	617b      	str	r3, [r7, #20]
   return(result);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e6      	bne.n	80043cc <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d103      	bne.n	8004414 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2210      	movs	r2, #16
 8004412:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff f911 	bl	8003644 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004422:	e00b      	b.n	800443c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fc fae7 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 800442a:	e007      	b.n	800443c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	619a      	str	r2, [r3, #24]
}
 800443c:	bf00      	nop
 800443e:	3758      	adds	r7, #88	; 0x58
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b096      	sub	sp, #88	; 0x58
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004452:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445a:	2b22      	cmp	r3, #34	; 0x22
 800445c:	f040 8094 	bne.w	8004588 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004470:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004474:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004478:	4013      	ands	r3, r2
 800447a:	b29a      	uxth	r2, r3
 800447c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d177      	bne.n	8004598 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c6:	643b      	str	r3, [r7, #64]	; 0x40
 80044c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e6      	bne.n	80044a8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3308      	adds	r3, #8
 80044e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3308      	adds	r3, #8
 80044f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451e:	2b01      	cmp	r3, #1
 8004520:	d12e      	bne.n	8004580 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	60bb      	str	r3, [r7, #8]
   return(result);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f023 0310 	bic.w	r3, r3, #16
 800453c:	647b      	str	r3, [r7, #68]	; 0x44
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6979      	ldr	r1, [r7, #20]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	613b      	str	r3, [r7, #16]
   return(result);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e6      	bne.n	8004528 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b10      	cmp	r3, #16
 8004566:	d103      	bne.n	8004570 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2210      	movs	r2, #16
 800456e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff f863 	bl	8003644 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800457e:	e00b      	b.n	8004598 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc fa39 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 8004586:	e007      	b.n	8004598 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0208 	orr.w	r2, r2, #8
 8004596:	619a      	str	r2, [r3, #24]
}
 8004598:	bf00      	nop
 800459a:	3758      	adds	r7, #88	; 0x58
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045b2:	2b84      	cmp	r3, #132	; 0x84
 80045b4:	d005      	beq.n	80045c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	3303      	adds	r3, #3
 80045c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045d4:	f000 fe14 	bl	8005200 <vTaskStartScheduler>
  
  return osOK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	bd80      	pop	{r7, pc}

080045de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e0:	b089      	sub	sp, #36	; 0x24
 80045e2:	af04      	add	r7, sp, #16
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <osThreadCreate+0x54>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01c      	beq.n	8004632 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685c      	ldr	r4, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681d      	ldr	r5, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691e      	ldr	r6, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ffc8 	bl	80045a0 <makeFreeRtosPriority>
 8004610:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800461a:	9202      	str	r2, [sp, #8]
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	9100      	str	r1, [sp, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4632      	mov	r2, r6
 8004624:	4629      	mov	r1, r5
 8004626:	4620      	mov	r0, r4
 8004628:	f000 fc19 	bl	8004e5e <xTaskCreateStatic>
 800462c:	4603      	mov	r3, r0
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e01c      	b.n	800466c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685c      	ldr	r4, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800463e:	b29e      	uxth	r6, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff ffaa 	bl	80045a0 <makeFreeRtosPriority>
 800464c:	4602      	mov	r2, r0
 800464e:	f107 030c 	add.w	r3, r7, #12
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	9200      	str	r2, [sp, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4632      	mov	r2, r6
 800465a:	4629      	mov	r1, r5
 800465c:	4620      	mov	r0, r4
 800465e:	f000 fc61 	bl	8004f24 <xTaskCreate>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d001      	beq.n	800466c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004676 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <osDelay+0x16>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	e000      	b.n	800468e <osDelay+0x18>
 800468c:	2301      	movs	r3, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fd80 	bl	8005194 <vTaskDelay>
  
  return osOK;
 8004694:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800469e:	b590      	push	{r4, r7, lr}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af02      	add	r7, sp, #8
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d011      	beq.n	80046d4 <osMessageCreate+0x36>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6859      	ldr	r1, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2400      	movs	r4, #0
 80046ca:	9400      	str	r4, [sp, #0]
 80046cc:	f000 f92e 	bl	800492c <xQueueGenericCreateStatic>
 80046d0:	4603      	mov	r3, r0
 80046d2:	e008      	b.n	80046e6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	4619      	mov	r1, r3
 80046e0:	f000 f9a6 	bl	8004a30 <xQueueGenericCreate>
 80046e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd90      	pop	{r4, r7, pc}

080046ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f103 0208 	add.w	r2, r3, #8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f04f 32ff 	mov.w	r2, #4294967295
 8004706:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f103 0208 	add.w	r2, r3, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0208 	add.w	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d103      	bne.n	80047b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e00c      	b.n	80047ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3308      	adds	r3, #8
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e002      	b.n	80047be <vListInsert+0x2e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d2f6      	bcs.n	80047b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6852      	ldr	r2, [r2, #4]
 8004822:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d103      	bne.n	8004836 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1e5a      	subs	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10c      	bne.n	8004886 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	b672      	cpsid	i
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	b662      	cpsie	i
 8004880:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004886:	f001 fa19 	bl	8005cbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	441a      	add	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	3b01      	subs	r3, #1
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	441a      	add	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22ff      	movs	r2, #255	; 0xff
 80048ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	22ff      	movs	r2, #255	; 0xff
 80048d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d114      	bne.n	8004906 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01a      	beq.n	800491a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3310      	adds	r3, #16
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 feb1 	bl	8005650 <xTaskRemoveFromEventList>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d012      	beq.n	800491a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <xQueueGenericReset+0xd0>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	e009      	b.n	800491a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3310      	adds	r3, #16
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff feef 	bl	80046ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3324      	adds	r3, #36	; 0x24
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff feea 	bl	80046ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800491a:	f001 fa03 	bl	8005d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800491e:	2301      	movs	r3, #1
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08e      	sub	sp, #56	; 0x38
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10c      	bne.n	800495a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	b672      	cpsid	i
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	b662      	cpsie	i
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10c      	bne.n	800497a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	b672      	cpsid	i
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	b662      	cpsie	i
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <xQueueGenericCreateStatic+0x5a>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <xQueueGenericCreateStatic+0x5e>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueGenericCreateStatic+0x60>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10c      	bne.n	80049aa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	b672      	cpsid	i
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	b662      	cpsie	i
 80049a4:	623b      	str	r3, [r7, #32]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <xQueueGenericCreateStatic+0x8a>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <xQueueGenericCreateStatic+0x8e>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <xQueueGenericCreateStatic+0x90>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10c      	bne.n	80049da <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	b672      	cpsid	i
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	b662      	cpsie	i
 80049d4:	61fb      	str	r3, [r7, #28]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049da:	2348      	movs	r3, #72	; 0x48
 80049dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b48      	cmp	r3, #72	; 0x48
 80049e2:	d00c      	beq.n	80049fe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	b672      	cpsid	i
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	b662      	cpsie	i
 80049f8:	61bb      	str	r3, [r7, #24]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00d      	beq.n	8004a26 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f847 	bl	8004ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3730      	adds	r7, #48	; 0x30
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10c      	bne.n	8004a5e <xQueueGenericCreate+0x2e>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	b672      	cpsid	i
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	b662      	cpsie	i
 8004a58:	613b      	str	r3, [r7, #16]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e004      	b.n	8004a74 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	3348      	adds	r3, #72	; 0x48
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fa4b 	bl	8005f14 <pvPortMalloc>
 8004a7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	3348      	adds	r3, #72	; 0x48
 8004a8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a98:	79fa      	ldrb	r2, [r7, #7]
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f805 	bl	8004ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d103      	bne.n	8004ad0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	69b8      	ldr	r0, [r7, #24]
 8004ae6:	f7ff feb7 	bl	8004858 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b08e      	sub	sp, #56	; 0x38
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	b672      	cpsid	i
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	b662      	cpsie	i
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <xQueueGenericSendFromISR+0x40>
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueGenericSendFromISR+0x44>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueGenericSendFromISR+0x46>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10c      	bne.n	8004b56 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	b672      	cpsid	i
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	b662      	cpsie	i
 8004b50:	623b      	str	r3, [r7, #32]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d103      	bne.n	8004b64 <xQueueGenericSendFromISR+0x72>
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <xQueueGenericSendFromISR+0x76>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <xQueueGenericSendFromISR+0x78>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10c      	bne.n	8004b88 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	b672      	cpsid	i
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	b662      	cpsie	i
 8004b82:	61fb      	str	r3, [r7, #28]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b88:	f001 f980 	bl	8005e8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b8c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	b672      	cpsid	i
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	b662      	cpsie	i
 8004ba4:	61ba      	str	r2, [r7, #24]
 8004ba6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <xQueueGenericSendFromISR+0xcc>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d12c      	bne.n	8004c18 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bce:	f000 f8b6 	bl	8004d3e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bd2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d112      	bne.n	8004c02 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d016      	beq.n	8004c12 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	3324      	adds	r3, #36	; 0x24
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fd31 	bl	8005650 <xTaskRemoveFromEventList>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e007      	b.n	8004c12 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c06:	3301      	adds	r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	b25a      	sxtb	r2, r3
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c12:	2301      	movs	r3, #1
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c16:	e001      	b.n	8004c1c <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3738      	adds	r7, #56	; 0x38
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b08e      	sub	sp, #56	; 0x38
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10c      	bne.n	8004c62 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	b672      	cpsid	i
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	b662      	cpsie	i
 8004c5c:	623b      	str	r3, [r7, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <xQueueReceiveFromISR+0x3e>
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <xQueueReceiveFromISR+0x42>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <xQueueReceiveFromISR+0x44>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	b672      	cpsid	i
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	b662      	cpsie	i
 8004c8e:	61fb      	str	r3, [r7, #28]
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c94:	f001 f8fa 	bl	8005e8c <vPortValidateInterruptPriority>
	__asm volatile
 8004c98:	f3ef 8211 	mrs	r2, BASEPRI
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	b672      	cpsid	i
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	b662      	cpsie	i
 8004cb0:	61ba      	str	r2, [r7, #24]
 8004cb2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004cb4:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02f      	beq.n	8004d24 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd2:	f000 f89e 	bl	8004e12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	1e5a      	subs	r2, r3, #1
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004cde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d112      	bne.n	8004d0e <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d016      	beq.n	8004d1e <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	3310      	adds	r3, #16
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fcab 	bl	8005650 <xTaskRemoveFromEventList>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e007      	b.n	8004d1e <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d12:	3301      	adds	r3, #1
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	b25a      	sxtb	r2, r3
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
 8004d22:	e001      	b.n	8004d28 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f383 8811 	msr	BASEPRI, r3
}
 8004d32:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3738      	adds	r7, #56	; 0x38
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b086      	sub	sp, #24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10d      	bne.n	8004d78 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d14d      	bne.n	8004e00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fdad 	bl	80058c8 <xTaskPriorityDisinherit>
 8004d6e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
 8004d76:	e043      	b.n	8004e00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d119      	bne.n	8004db2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6858      	ldr	r0, [r3, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	461a      	mov	r2, r3
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	f001 facb 	bl	8006324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	441a      	add	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d32b      	bcc.n	8004e00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	e026      	b.n	8004e00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68d8      	ldr	r0, [r3, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	f001 fab1 	bl	8006324 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	425b      	negs	r3, r3
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d207      	bcs.n	8004dee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	425b      	negs	r3, r3
 8004de8:	441a      	add	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d105      	bne.n	8004e00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e08:	697b      	ldr	r3, [r7, #20]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d018      	beq.n	8004e56 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d303      	bcc.n	8004e46 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68d9      	ldr	r1, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6838      	ldr	r0, [r7, #0]
 8004e52:	f001 fa67 	bl	8006324 <memcpy>
	}
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b08e      	sub	sp, #56	; 0x38
 8004e62:	af04      	add	r7, sp, #16
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10c      	bne.n	8004e8c <xTaskCreateStatic+0x2e>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	b672      	cpsid	i
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	b662      	cpsie	i
 8004e86:	623b      	str	r3, [r7, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10c      	bne.n	8004eac <xTaskCreateStatic+0x4e>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	b672      	cpsid	i
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	b662      	cpsie	i
 8004ea6:	61fb      	str	r3, [r7, #28]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eac:	2354      	movs	r3, #84	; 0x54
 8004eae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b54      	cmp	r3, #84	; 0x54
 8004eb4:	d00c      	beq.n	8004ed0 <xTaskCreateStatic+0x72>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	b672      	cpsid	i
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	b662      	cpsie	i
 8004eca:	61bb      	str	r3, [r7, #24]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ed0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01e      	beq.n	8004f16 <xTaskCreateStatic+0xb8>
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01b      	beq.n	8004f16 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9303      	str	r3, [sp, #12]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	9302      	str	r3, [sp, #8]
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f850 	bl	8004fae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f10:	f000 f8d6 	bl	80050c0 <prvAddNewTaskToReadyList>
 8004f14:	e001      	b.n	8004f1a <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f1a:	697b      	ldr	r3, [r7, #20]
	}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3728      	adds	r7, #40	; 0x28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	; 0x30
 8004f28:	af04      	add	r7, sp, #16
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 ffeb 	bl	8005f14 <pvPortMalloc>
 8004f3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00e      	beq.n	8004f64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f46:	2054      	movs	r0, #84	; 0x54
 8004f48:	f000 ffe4 	bl	8005f14 <pvPortMalloc>
 8004f4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
 8004f5a:	e005      	b.n	8004f68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f5c:	6978      	ldr	r0, [r7, #20]
 8004f5e:	f001 f8a3 	bl	80060a8 <vPortFree>
 8004f62:	e001      	b.n	8004f68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	9302      	str	r3, [sp, #8]
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f80e 	bl	8004fae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f92:	69f8      	ldr	r0, [r7, #28]
 8004f94:	f000 f894 	bl	80050c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	e002      	b.n	8004fa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
	}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b088      	sub	sp, #32
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004fc6:	440b      	add	r3, r1
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f023 0307 	bic.w	r3, r3, #7
 8004fd4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	b672      	cpsid	i
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	b662      	cpsie	i
 8004ff4:	617b      	str	r3, [r7, #20]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01f      	beq.n	8005040 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	e012      	b.n	800502c <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	7819      	ldrb	r1, [r3, #0]
 800500e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	3334      	adds	r3, #52	; 0x34
 8005016:	460a      	mov	r2, r1
 8005018:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d006      	beq.n	8005034 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3301      	adds	r3, #1
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	d9e9      	bls.n	8005006 <prvInitialiseNewTask+0x58>
 8005032:	e000      	b.n	8005036 <prvInitialiseNewTask+0x88>
			{
				break;
 8005034:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800503e:	e003      	b.n	8005048 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	2b06      	cmp	r3, #6
 800504c:	d901      	bls.n	8005052 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800504e:	2306      	movs	r3, #6
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	2200      	movs	r2, #0
 8005062:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	3304      	adds	r3, #4
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fb60 	bl	800472e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	3318      	adds	r3, #24
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fb5b 	bl	800472e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800507c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	f1c3 0207 	rsb	r2, r3, #7
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2200      	movs	r2, #0
 8005092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	69b8      	ldr	r0, [r7, #24]
 80050a2:	f000 fd01 	bl	8005aa8 <pxPortInitialiseStack>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050b8:	bf00      	nop
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050c8:	f000 fdf8 	bl	8005cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <prvAddNewTaskToReadyList+0xb8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	4a29      	ldr	r2, [pc, #164]	; (8005178 <prvAddNewTaskToReadyList+0xb8>)
 80050d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050d6:	4b29      	ldr	r3, [pc, #164]	; (800517c <prvAddNewTaskToReadyList+0xbc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050de:	4a27      	ldr	r2, [pc, #156]	; (800517c <prvAddNewTaskToReadyList+0xbc>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050e4:	4b24      	ldr	r3, [pc, #144]	; (8005178 <prvAddNewTaskToReadyList+0xb8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d110      	bne.n	800510e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050ec:	f000 fb2c 	bl	8005748 <prvInitialiseTaskLists>
 80050f0:	e00d      	b.n	800510e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050f2:	4b23      	ldr	r3, [pc, #140]	; (8005180 <prvAddNewTaskToReadyList+0xc0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050fa:	4b20      	ldr	r3, [pc, #128]	; (800517c <prvAddNewTaskToReadyList+0xbc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	429a      	cmp	r2, r3
 8005106:	d802      	bhi.n	800510e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <prvAddNewTaskToReadyList+0xbc>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <prvAddNewTaskToReadyList+0xc4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3301      	adds	r3, #1
 8005114:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <prvAddNewTaskToReadyList+0xc4>)
 8005116:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	2201      	movs	r2, #1
 800511e:	409a      	lsls	r2, r3
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <prvAddNewTaskToReadyList+0xc8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4313      	orrs	r3, r2
 8005126:	4a18      	ldr	r2, [pc, #96]	; (8005188 <prvAddNewTaskToReadyList+0xc8>)
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <prvAddNewTaskToReadyList+0xcc>)
 8005138:	441a      	add	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f7ff fb01 	bl	8004748 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005146:	f000 fded 	bl	8005d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800514a:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <prvAddNewTaskToReadyList+0xc0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00e      	beq.n	8005170 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <prvAddNewTaskToReadyList+0xbc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	429a      	cmp	r2, r3
 800515e:	d207      	bcs.n	8005170 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <prvAddNewTaskToReadyList+0xd0>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000478 	.word	0x20000478
 800517c:	20000378 	.word	0x20000378
 8005180:	20000484 	.word	0x20000484
 8005184:	20000494 	.word	0x20000494
 8005188:	20000480 	.word	0x20000480
 800518c:	2000037c 	.word	0x2000037c
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d019      	beq.n	80051da <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <vTaskDelay+0x64>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <vTaskDelay+0x34>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	b672      	cpsid	i
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	b662      	cpsie	i
 80051c2:	60bb      	str	r3, [r7, #8]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80051c8:	f000 f87e 	bl	80052c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051cc:	2100      	movs	r1, #0
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fc04 	bl	80059dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051d4:	f000 f886 	bl	80052e4 <xTaskResumeAll>
 80051d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d107      	bne.n	80051f0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <vTaskDelay+0x68>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	200004a0 	.word	0x200004a0
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005206:	2300      	movs	r3, #0
 8005208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800520e:	463a      	mov	r2, r7
 8005210:	1d39      	adds	r1, r7, #4
 8005212:	f107 0308 	add.w	r3, r7, #8
 8005216:	4618      	mov	r0, r3
 8005218:	f7fb f994 	bl	8000544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	9202      	str	r2, [sp, #8]
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	2300      	movs	r3, #0
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	2300      	movs	r3, #0
 800522c:	460a      	mov	r2, r1
 800522e:	4920      	ldr	r1, [pc, #128]	; (80052b0 <vTaskStartScheduler+0xb0>)
 8005230:	4820      	ldr	r0, [pc, #128]	; (80052b4 <vTaskStartScheduler+0xb4>)
 8005232:	f7ff fe14 	bl	8004e5e <xTaskCreateStatic>
 8005236:	4603      	mov	r3, r0
 8005238:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <vTaskStartScheduler+0xb8>)
 800523a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <vTaskStartScheduler+0xb8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005244:	2301      	movs	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e001      	b.n	800524e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d118      	bne.n	8005286 <vTaskStartScheduler+0x86>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	b672      	cpsid	i
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	b662      	cpsie	i
 8005268:	613b      	str	r3, [r7, #16]
}
 800526a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800526c:	4b13      	ldr	r3, [pc, #76]	; (80052bc <vTaskStartScheduler+0xbc>)
 800526e:	f04f 32ff 	mov.w	r2, #4294967295
 8005272:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005274:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <vTaskStartScheduler+0xc0>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800527a:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <vTaskStartScheduler+0xc4>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005280:	f000 fc9e 	bl	8005bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005284:	e010      	b.n	80052a8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d10c      	bne.n	80052a8 <vTaskStartScheduler+0xa8>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	b672      	cpsid	i
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	b662      	cpsie	i
 80052a2:	60fb      	str	r3, [r7, #12]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <vTaskStartScheduler+0xa6>
}
 80052a8:	bf00      	nop
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	08006418 	.word	0x08006418
 80052b4:	08005719 	.word	0x08005719
 80052b8:	2000049c 	.word	0x2000049c
 80052bc:	20000498 	.word	0x20000498
 80052c0:	20000484 	.word	0x20000484
 80052c4:	2000047c 	.word	0x2000047c

080052c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <vTaskSuspendAll+0x18>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	4a03      	ldr	r2, [pc, #12]	; (80052e0 <vTaskSuspendAll+0x18>)
 80052d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80052d6:	bf00      	nop
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	200004a0 	.word	0x200004a0

080052e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052f2:	4b42      	ldr	r3, [pc, #264]	; (80053fc <xTaskResumeAll+0x118>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10c      	bne.n	8005314 <xTaskResumeAll+0x30>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	b672      	cpsid	i
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	b662      	cpsie	i
 800530e:	603b      	str	r3, [r7, #0]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005314:	f000 fcd2 	bl	8005cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005318:	4b38      	ldr	r3, [pc, #224]	; (80053fc <xTaskResumeAll+0x118>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3b01      	subs	r3, #1
 800531e:	4a37      	ldr	r2, [pc, #220]	; (80053fc <xTaskResumeAll+0x118>)
 8005320:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005322:	4b36      	ldr	r3, [pc, #216]	; (80053fc <xTaskResumeAll+0x118>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d161      	bne.n	80053ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800532a:	4b35      	ldr	r3, [pc, #212]	; (8005400 <xTaskResumeAll+0x11c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d05d      	beq.n	80053ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005332:	e02e      	b.n	8005392 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005334:	4b33      	ldr	r3, [pc, #204]	; (8005404 <xTaskResumeAll+0x120>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3318      	adds	r3, #24
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fa5e 	bl	8004802 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3304      	adds	r3, #4
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fa59 	bl	8004802 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	2201      	movs	r2, #1
 8005356:	409a      	lsls	r2, r3
 8005358:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <xTaskResumeAll+0x124>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4313      	orrs	r3, r2
 800535e:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <xTaskResumeAll+0x124>)
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4a27      	ldr	r2, [pc, #156]	; (800540c <xTaskResumeAll+0x128>)
 8005370:	441a      	add	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7ff f9e5 	bl	8004748 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <xTaskResumeAll+0x12c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	429a      	cmp	r2, r3
 800538a:	d302      	bcc.n	8005392 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800538c:	4b21      	ldr	r3, [pc, #132]	; (8005414 <xTaskResumeAll+0x130>)
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <xTaskResumeAll+0x120>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1cc      	bne.n	8005334 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053a0:	f000 fa72 	bl	8005888 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053a4:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <xTaskResumeAll+0x134>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d010      	beq.n	80053d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053b0:	f000 f836 	bl	8005420 <xTaskIncrementTick>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <xTaskResumeAll+0x130>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f1      	bne.n	80053b0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80053cc:	4b12      	ldr	r3, [pc, #72]	; (8005418 <xTaskResumeAll+0x134>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <xTaskResumeAll+0x130>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053da:	2301      	movs	r3, #1
 80053dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053de:	4b0f      	ldr	r3, [pc, #60]	; (800541c <xTaskResumeAll+0x138>)
 80053e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053ee:	f000 fc99 	bl	8005d24 <vPortExitCritical>

	return xAlreadyYielded;
 80053f2:	68bb      	ldr	r3, [r7, #8]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	200004a0 	.word	0x200004a0
 8005400:	20000478 	.word	0x20000478
 8005404:	20000438 	.word	0x20000438
 8005408:	20000480 	.word	0x20000480
 800540c:	2000037c 	.word	0x2000037c
 8005410:	20000378 	.word	0x20000378
 8005414:	2000048c 	.word	0x2000048c
 8005418:	20000488 	.word	0x20000488
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542a:	4b4f      	ldr	r3, [pc, #316]	; (8005568 <xTaskIncrementTick+0x148>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 808a 	bne.w	8005548 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005434:	4b4d      	ldr	r3, [pc, #308]	; (800556c <xTaskIncrementTick+0x14c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800543c:	4a4b      	ldr	r2, [pc, #300]	; (800556c <xTaskIncrementTick+0x14c>)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d122      	bne.n	800548e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005448:	4b49      	ldr	r3, [pc, #292]	; (8005570 <xTaskIncrementTick+0x150>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <xTaskIncrementTick+0x4c>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	b672      	cpsid	i
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	b662      	cpsie	i
 8005466:	603b      	str	r3, [r7, #0]
}
 8005468:	bf00      	nop
 800546a:	e7fe      	b.n	800546a <xTaskIncrementTick+0x4a>
 800546c:	4b40      	ldr	r3, [pc, #256]	; (8005570 <xTaskIncrementTick+0x150>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	4b40      	ldr	r3, [pc, #256]	; (8005574 <xTaskIncrementTick+0x154>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a3e      	ldr	r2, [pc, #248]	; (8005570 <xTaskIncrementTick+0x150>)
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4a3e      	ldr	r2, [pc, #248]	; (8005574 <xTaskIncrementTick+0x154>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b3d      	ldr	r3, [pc, #244]	; (8005578 <xTaskIncrementTick+0x158>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	4a3c      	ldr	r2, [pc, #240]	; (8005578 <xTaskIncrementTick+0x158>)
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	f000 f9fd 	bl	8005888 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800548e:	4b3b      	ldr	r3, [pc, #236]	; (800557c <xTaskIncrementTick+0x15c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	429a      	cmp	r2, r3
 8005496:	d348      	bcc.n	800552a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005498:	4b35      	ldr	r3, [pc, #212]	; (8005570 <xTaskIncrementTick+0x150>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a2:	4b36      	ldr	r3, [pc, #216]	; (800557c <xTaskIncrementTick+0x15c>)
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	601a      	str	r2, [r3, #0]
					break;
 80054aa:	e03e      	b.n	800552a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ac:	4b30      	ldr	r3, [pc, #192]	; (8005570 <xTaskIncrementTick+0x150>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d203      	bcs.n	80054cc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054c4:	4a2d      	ldr	r2, [pc, #180]	; (800557c <xTaskIncrementTick+0x15c>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054ca:	e02e      	b.n	800552a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff f996 	bl	8004802 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3318      	adds	r3, #24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff f98d 	bl	8004802 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	2201      	movs	r2, #1
 80054ee:	409a      	lsls	r2, r3
 80054f0:	4b23      	ldr	r3, [pc, #140]	; (8005580 <xTaskIncrementTick+0x160>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <xTaskIncrementTick+0x160>)
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <xTaskIncrementTick+0x164>)
 8005508:	441a      	add	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7ff f919 	bl	8004748 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <xTaskIncrementTick+0x168>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	429a      	cmp	r2, r3
 8005522:	d3b9      	bcc.n	8005498 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005528:	e7b6      	b.n	8005498 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800552a:	4b17      	ldr	r3, [pc, #92]	; (8005588 <xTaskIncrementTick+0x168>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005530:	4914      	ldr	r1, [pc, #80]	; (8005584 <xTaskIncrementTick+0x164>)
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d907      	bls.n	8005552 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e004      	b.n	8005552 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005548:	4b10      	ldr	r3, [pc, #64]	; (800558c <xTaskIncrementTick+0x16c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	4a0f      	ldr	r2, [pc, #60]	; (800558c <xTaskIncrementTick+0x16c>)
 8005550:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005552:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <xTaskIncrementTick+0x170>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800555a:	2301      	movs	r3, #1
 800555c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800555e:	697b      	ldr	r3, [r7, #20]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	200004a0 	.word	0x200004a0
 800556c:	2000047c 	.word	0x2000047c
 8005570:	20000430 	.word	0x20000430
 8005574:	20000434 	.word	0x20000434
 8005578:	20000490 	.word	0x20000490
 800557c:	20000498 	.word	0x20000498
 8005580:	20000480 	.word	0x20000480
 8005584:	2000037c 	.word	0x2000037c
 8005588:	20000378 	.word	0x20000378
 800558c:	20000488 	.word	0x20000488
 8005590:	2000048c 	.word	0x2000048c

08005594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800559a:	4b28      	ldr	r3, [pc, #160]	; (800563c <vTaskSwitchContext+0xa8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055a2:	4b27      	ldr	r3, [pc, #156]	; (8005640 <vTaskSwitchContext+0xac>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055a8:	e041      	b.n	800562e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80055aa:	4b25      	ldr	r3, [pc, #148]	; (8005640 <vTaskSwitchContext+0xac>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b0:	4b24      	ldr	r3, [pc, #144]	; (8005644 <vTaskSwitchContext+0xb0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	fab3 f383 	clz	r3, r3
 80055bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	f1c3 031f 	rsb	r3, r3, #31
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	4920      	ldr	r1, [pc, #128]	; (8005648 <vTaskSwitchContext+0xb4>)
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10c      	bne.n	80055f4 <vTaskSwitchContext+0x60>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	b672      	cpsid	i
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	b662      	cpsie	i
 80055ee:	607b      	str	r3, [r7, #4]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <vTaskSwitchContext+0x5e>
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4a12      	ldr	r2, [pc, #72]	; (8005648 <vTaskSwitchContext+0xb4>)
 8005600:	4413      	add	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3308      	adds	r3, #8
 8005616:	429a      	cmp	r2, r3
 8005618:	d104      	bne.n	8005624 <vTaskSwitchContext+0x90>
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <vTaskSwitchContext+0xb8>)
 800562c:	6013      	str	r3, [r2, #0]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	200004a0 	.word	0x200004a0
 8005640:	2000048c 	.word	0x2000048c
 8005644:	20000480 	.word	0x20000480
 8005648:	2000037c 	.word	0x2000037c
 800564c:	20000378 	.word	0x20000378

08005650 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10c      	bne.n	8005680 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	b672      	cpsid	i
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	b662      	cpsie	i
 800567a:	60fb      	str	r3, [r7, #12]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	3318      	adds	r3, #24
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff f8bc 	bl	8004802 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800568a:	4b1d      	ldr	r3, [pc, #116]	; (8005700 <xTaskRemoveFromEventList+0xb0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d11c      	bne.n	80056cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	3304      	adds	r3, #4
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff f8b3 	bl	8004802 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	2201      	movs	r2, #1
 80056a2:	409a      	lsls	r2, r3
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <xTaskRemoveFromEventList+0xb4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	4a16      	ldr	r2, [pc, #88]	; (8005704 <xTaskRemoveFromEventList+0xb4>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <xTaskRemoveFromEventList+0xb8>)
 80056bc:	441a      	add	r2, r3
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7ff f83f 	bl	8004748 <vListInsertEnd>
 80056ca:	e005      	b.n	80056d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	3318      	adds	r3, #24
 80056d0:	4619      	mov	r1, r3
 80056d2:	480e      	ldr	r0, [pc, #56]	; (800570c <xTaskRemoveFromEventList+0xbc>)
 80056d4:	f7ff f838 	bl	8004748 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <xTaskRemoveFromEventList+0xc0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d905      	bls.n	80056f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056e6:	2301      	movs	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056ea:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <xTaskRemoveFromEventList+0xc4>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e001      	b.n	80056f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056f6:	697b      	ldr	r3, [r7, #20]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	200004a0 	.word	0x200004a0
 8005704:	20000480 	.word	0x20000480
 8005708:	2000037c 	.word	0x2000037c
 800570c:	20000438 	.word	0x20000438
 8005710:	20000378 	.word	0x20000378
 8005714:	2000048c 	.word	0x2000048c

08005718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005720:	f000 f852 	bl	80057c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <prvIdleTask+0x28>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d9f9      	bls.n	8005720 <prvIdleTask+0x8>
			{
				taskYIELD();
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <prvIdleTask+0x2c>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800573c:	e7f0      	b.n	8005720 <prvIdleTask+0x8>
 800573e:	bf00      	nop
 8005740:	2000037c 	.word	0x2000037c
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	e00c      	b.n	800576e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <prvInitialiseTaskLists+0x60>)
 8005760:	4413      	add	r3, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe ffc3 	bl	80046ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3301      	adds	r3, #1
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b06      	cmp	r3, #6
 8005772:	d9ef      	bls.n	8005754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005774:	480d      	ldr	r0, [pc, #52]	; (80057ac <prvInitialiseTaskLists+0x64>)
 8005776:	f7fe ffba 	bl	80046ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800577a:	480d      	ldr	r0, [pc, #52]	; (80057b0 <prvInitialiseTaskLists+0x68>)
 800577c:	f7fe ffb7 	bl	80046ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005780:	480c      	ldr	r0, [pc, #48]	; (80057b4 <prvInitialiseTaskLists+0x6c>)
 8005782:	f7fe ffb4 	bl	80046ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005786:	480c      	ldr	r0, [pc, #48]	; (80057b8 <prvInitialiseTaskLists+0x70>)
 8005788:	f7fe ffb1 	bl	80046ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800578c:	480b      	ldr	r0, [pc, #44]	; (80057bc <prvInitialiseTaskLists+0x74>)
 800578e:	f7fe ffae 	bl	80046ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005792:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <prvInitialiseTaskLists+0x78>)
 8005794:	4a05      	ldr	r2, [pc, #20]	; (80057ac <prvInitialiseTaskLists+0x64>)
 8005796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <prvInitialiseTaskLists+0x7c>)
 800579a:	4a05      	ldr	r2, [pc, #20]	; (80057b0 <prvInitialiseTaskLists+0x68>)
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2000037c 	.word	0x2000037c
 80057ac:	20000408 	.word	0x20000408
 80057b0:	2000041c 	.word	0x2000041c
 80057b4:	20000438 	.word	0x20000438
 80057b8:	2000044c 	.word	0x2000044c
 80057bc:	20000464 	.word	0x20000464
 80057c0:	20000430 	.word	0x20000430
 80057c4:	20000434 	.word	0x20000434

080057c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ce:	e019      	b.n	8005804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057d0:	f000 fa74 	bl	8005cbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b10      	ldr	r3, [pc, #64]	; (8005818 <prvCheckTasksWaitingTermination+0x50>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff f80e 	bl	8004802 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057e6:	4b0d      	ldr	r3, [pc, #52]	; (800581c <prvCheckTasksWaitingTermination+0x54>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	4a0b      	ldr	r2, [pc, #44]	; (800581c <prvCheckTasksWaitingTermination+0x54>)
 80057ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <prvCheckTasksWaitingTermination+0x58>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <prvCheckTasksWaitingTermination+0x58>)
 80057f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057fa:	f000 fa93 	bl	8005d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f810 	bl	8005824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <prvCheckTasksWaitingTermination+0x58>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e1      	bne.n	80057d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	2000044c 	.word	0x2000044c
 800581c:	20000478 	.word	0x20000478
 8005820:	20000460 	.word	0x20000460

08005824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005832:	2b00      	cmp	r3, #0
 8005834:	d108      	bne.n	8005848 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fc34 	bl	80060a8 <vPortFree>
				vPortFree( pxTCB );
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fc31 	bl	80060a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005846:	e01a      	b.n	800587e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800584e:	2b01      	cmp	r3, #1
 8005850:	d103      	bne.n	800585a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fc28 	bl	80060a8 <vPortFree>
	}
 8005858:	e011      	b.n	800587e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005860:	2b02      	cmp	r3, #2
 8005862:	d00c      	beq.n	800587e <prvDeleteTCB+0x5a>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	b672      	cpsid	i
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	b662      	cpsie	i
 8005878:	60fb      	str	r3, [r7, #12]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <prvDeleteTCB+0x58>
	}
 800587e:	bf00      	nop
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800588e:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <prvResetNextTaskUnblockTime+0x38>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <prvResetNextTaskUnblockTime+0x3c>)
 800589a:	f04f 32ff 	mov.w	r2, #4294967295
 800589e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058a0:	e008      	b.n	80058b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <prvResetNextTaskUnblockTime+0x38>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <prvResetNextTaskUnblockTime+0x3c>)
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	20000430 	.word	0x20000430
 80058c4:	20000498 	.word	0x20000498

080058c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d072      	beq.n	80059c4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058de:	4b3c      	ldr	r3, [pc, #240]	; (80059d0 <xTaskPriorityDisinherit+0x108>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d00c      	beq.n	8005902 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	b672      	cpsid	i
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	b662      	cpsie	i
 80058fc:	60fb      	str	r3, [r7, #12]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10c      	bne.n	8005924 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	b672      	cpsid	i
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	b662      	cpsie	i
 800591e:	60bb      	str	r3, [r7, #8]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005928:	1e5a      	subs	r2, r3, #1
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	429a      	cmp	r2, r3
 8005938:	d044      	beq.n	80059c4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593e:	2b00      	cmp	r3, #0
 8005940:	d140      	bne.n	80059c4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3304      	adds	r3, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe ff5b 	bl	8004802 <uxListRemove>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d115      	bne.n	800597e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	491f      	ldr	r1, [pc, #124]	; (80059d4 <xTaskPriorityDisinherit+0x10c>)
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <xTaskPriorityDisinherit+0xb6>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	2201      	movs	r2, #1
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43da      	mvns	r2, r3
 8005974:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <xTaskPriorityDisinherit+0x110>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <xTaskPriorityDisinherit+0x110>)
 800597c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	f1c3 0207 	rsb	r2, r3, #7
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	2201      	movs	r2, #1
 8005998:	409a      	lsls	r2, r3
 800599a:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <xTaskPriorityDisinherit+0x110>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	4a0d      	ldr	r2, [pc, #52]	; (80059d8 <xTaskPriorityDisinherit+0x110>)
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4a08      	ldr	r2, [pc, #32]	; (80059d4 <xTaskPriorityDisinherit+0x10c>)
 80059b2:	441a      	add	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7fe fec4 	bl	8004748 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059c4:	697b      	ldr	r3, [r7, #20]
	}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000378 	.word	0x20000378
 80059d4:	2000037c 	.word	0x2000037c
 80059d8:	20000480 	.word	0x20000480

080059dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xb0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ec:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3304      	adds	r3, #4
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe ff05 	bl	8004802 <uxListRemove>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	2201      	movs	r2, #1
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	43da      	mvns	r2, r3
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4013      	ands	r3, r2
 8005a12:	4a20      	ldr	r2, [pc, #128]	; (8005a94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d10a      	bne.n	8005a34 <prvAddCurrentTaskToDelayedList+0x58>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a24:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	481a      	ldr	r0, [pc, #104]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a2e:	f7fe fe8b 	bl	8004748 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a32:	e026      	b.n	8005a82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a3c:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d209      	bcs.n	8005a60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a4c:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f7fe fe99 	bl	8004790 <vListInsert>
}
 8005a5e:	e010      	b.n	8005a82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7fe fe8f 	bl	8004790 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a72:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d202      	bcs.n	8005a82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a7c:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6013      	str	r3, [r2, #0]
}
 8005a82:	bf00      	nop
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	2000047c 	.word	0x2000047c
 8005a90:	20000378 	.word	0x20000378
 8005a94:	20000480 	.word	0x20000480
 8005a98:	20000464 	.word	0x20000464
 8005a9c:	20000434 	.word	0x20000434
 8005aa0:	20000430 	.word	0x20000430
 8005aa4:	20000498 	.word	0x20000498

08005aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3b04      	subs	r3, #4
 8005ab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f023 0201 	bic.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3b04      	subs	r3, #4
 8005ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ad8:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <pxPortInitialiseStack+0x64>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3b14      	subs	r3, #20
 8005ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b04      	subs	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f06f 0202 	mvn.w	r2, #2
 8005af6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3b20      	subs	r3, #32
 8005afc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	08005b11 	.word	0x08005b11

08005b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <prvTaskExitError+0x5c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d00c      	beq.n	8005b3e <prvTaskExitError+0x2e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	b672      	cpsid	i
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	b662      	cpsie	i
 8005b38:	60fb      	str	r3, [r7, #12]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <prvTaskExitError+0x2c>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	b672      	cpsid	i
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	b662      	cpsie	i
 8005b52:	60bb      	str	r3, [r7, #8]
}
 8005b54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b56:	bf00      	nop
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0fc      	beq.n	8005b58 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	2000000c 	.word	0x2000000c

08005b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <pxCurrentTCBConst2>)
 8005b72:	6819      	ldr	r1, [r3, #0]
 8005b74:	6808      	ldr	r0, [r1, #0]
 8005b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	f380 8809 	msr	PSP, r0
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8811 	msr	BASEPRI, r0
 8005b8a:	4770      	bx	lr
 8005b8c:	f3af 8000 	nop.w

08005b90 <pxCurrentTCBConst2>:
 8005b90:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b98:	4808      	ldr	r0, [pc, #32]	; (8005bbc <prvPortStartFirstTask+0x24>)
 8005b9a:	6800      	ldr	r0, [r0, #0]
 8005b9c:	6800      	ldr	r0, [r0, #0]
 8005b9e:	f380 8808 	msr	MSP, r0
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f380 8814 	msr	CONTROL, r0
 8005baa:	b662      	cpsie	i
 8005bac:	b661      	cpsie	f
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	df00      	svc	0
 8005bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bba:	bf00      	nop
 8005bbc:	e000ed08 	.word	0xe000ed08

08005bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bc6:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <xPortStartScheduler+0xe4>)
 8005bc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	22ff      	movs	r2, #255	; 0xff
 8005bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <xPortStartScheduler+0xe8>)
 8005bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bee:	4b2f      	ldr	r3, [pc, #188]	; (8005cac <xPortStartScheduler+0xec>)
 8005bf0:	2207      	movs	r2, #7
 8005bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bf4:	e009      	b.n	8005c0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005bf6:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <xPortStartScheduler+0xec>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	4a2b      	ldr	r2, [pc, #172]	; (8005cac <xPortStartScheduler+0xec>)
 8005bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d0ef      	beq.n	8005bf6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c16:	4b25      	ldr	r3, [pc, #148]	; (8005cac <xPortStartScheduler+0xec>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f1c3 0307 	rsb	r3, r3, #7
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d00c      	beq.n	8005c3c <xPortStartScheduler+0x7c>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	b672      	cpsid	i
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	b662      	cpsie	i
 8005c36:	60bb      	str	r3, [r7, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	; (8005cac <xPortStartScheduler+0xec>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <xPortStartScheduler+0xec>)
 8005c44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c46:	4b19      	ldr	r3, [pc, #100]	; (8005cac <xPortStartScheduler+0xec>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c4e:	4a17      	ldr	r2, [pc, #92]	; (8005cac <xPortStartScheduler+0xec>)
 8005c50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <xPortStartScheduler+0xf0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <xPortStartScheduler+0xf0>)
 8005c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <xPortStartScheduler+0xf0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <xPortStartScheduler+0xf0>)
 8005c6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c72:	f000 f8dd 	bl	8005e30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <xPortStartScheduler+0xf4>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c7c:	f000 f8fc 	bl	8005e78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c80:	4b0d      	ldr	r3, [pc, #52]	; (8005cb8 <xPortStartScheduler+0xf8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <xPortStartScheduler+0xf8>)
 8005c86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c8c:	f7ff ff84 	bl	8005b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c90:	f7ff fc80 	bl	8005594 <vTaskSwitchContext>
	prvTaskExitError();
 8005c94:	f7ff ff3c 	bl	8005b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	e000e400 	.word	0xe000e400
 8005ca8:	200004a4 	.word	0x200004a4
 8005cac:	200004a8 	.word	0x200004a8
 8005cb0:	e000ed20 	.word	0xe000ed20
 8005cb4:	2000000c 	.word	0x2000000c
 8005cb8:	e000ef34 	.word	0xe000ef34

08005cbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	b672      	cpsid	i
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	b662      	cpsie	i
 8005cd6:	607b      	str	r3, [r7, #4]
}
 8005cd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cda:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <vPortEnterCritical+0x60>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	4a0e      	ldr	r2, [pc, #56]	; (8005d1c <vPortEnterCritical+0x60>)
 8005ce2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <vPortEnterCritical+0x60>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d111      	bne.n	8005d10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cec:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <vPortEnterCritical+0x64>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00c      	beq.n	8005d10 <vPortEnterCritical+0x54>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	b672      	cpsid	i
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	b662      	cpsie	i
 8005d0a:	603b      	str	r3, [r7, #0]
}
 8005d0c:	bf00      	nop
 8005d0e:	e7fe      	b.n	8005d0e <vPortEnterCritical+0x52>
	}
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <vPortExitCritical+0x54>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10c      	bne.n	8005d4c <vPortExitCritical+0x28>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	b672      	cpsid	i
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	b662      	cpsie	i
 8005d46:	607b      	str	r3, [r7, #4]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <vPortExitCritical+0x54>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <vPortExitCritical+0x54>)
 8005d54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d56:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <vPortExitCritical+0x54>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <vPortExitCritical+0x46>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f383 8811 	msr	BASEPRI, r3
}
 8005d68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	2000000c 	.word	0x2000000c
 8005d7c:	00000000 	.word	0x00000000

08005d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d80:	f3ef 8009 	mrs	r0, PSP
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <pxCurrentTCBConst>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	f01e 0f10 	tst.w	lr, #16
 8005d90:	bf08      	it	eq
 8005d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	6010      	str	r0, [r2, #0]
 8005d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005da4:	b672      	cpsid	i
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	b662      	cpsie	i
 8005db4:	f7ff fbee 	bl	8005594 <vTaskSwitchContext>
 8005db8:	f04f 0000 	mov.w	r0, #0
 8005dbc:	f380 8811 	msr	BASEPRI, r0
 8005dc0:	bc09      	pop	{r0, r3}
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	6808      	ldr	r0, [r1, #0]
 8005dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dca:	f01e 0f10 	tst.w	lr, #16
 8005dce:	bf08      	it	eq
 8005dd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005dd4:	f380 8809 	msr	PSP, r0
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop

08005de0 <pxCurrentTCBConst>:
 8005de0:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop

08005de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	b672      	cpsid	i
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	b662      	cpsie	i
 8005e02:	607b      	str	r3, [r7, #4]
}
 8005e04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e06:	f7ff fb0b 	bl	8005420 <xTaskIncrementTick>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <SysTick_Handler+0x44>)
 8005e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f383 8811 	msr	BASEPRI, r3
}
 8005e22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <vPortSetupTimerInterrupt+0x34>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <vPortSetupTimerInterrupt+0x38>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <vPortSetupTimerInterrupt+0x3c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <vPortSetupTimerInterrupt+0x40>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	099b      	lsrs	r3, r3, #6
 8005e4c:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <vPortSetupTimerInterrupt+0x44>)
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e52:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <vPortSetupTimerInterrupt+0x34>)
 8005e54:	2207      	movs	r2, #7
 8005e56:	601a      	str	r2, [r3, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	e000e010 	.word	0xe000e010
 8005e68:	e000e018 	.word	0xe000e018
 8005e6c:	20000000 	.word	0x20000000
 8005e70:	10624dd3 	.word	0x10624dd3
 8005e74:	e000e014 	.word	0xe000e014

08005e78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e88 <vPortEnableVFP+0x10>
 8005e7c:	6801      	ldr	r1, [r0, #0]
 8005e7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e82:	6001      	str	r1, [r0, #0]
 8005e84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e86:	bf00      	nop
 8005e88:	e000ed88 	.word	0xe000ed88

08005e8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e92:	f3ef 8305 	mrs	r3, IPSR
 8005e96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b0f      	cmp	r3, #15
 8005e9c:	d916      	bls.n	8005ecc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e9e:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <vPortValidateInterruptPriority+0x78>)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <vPortValidateInterruptPriority+0x7c>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	7afa      	ldrb	r2, [r7, #11]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d20c      	bcs.n	8005ecc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	b672      	cpsid	i
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	b662      	cpsie	i
 8005ec6:	607b      	str	r3, [r7, #4]
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <vPortValidateInterruptPriority+0x80>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <vPortValidateInterruptPriority+0x84>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d90c      	bls.n	8005ef6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	b672      	cpsid	i
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	b662      	cpsie	i
 8005ef0:	603b      	str	r3, [r7, #0]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <vPortValidateInterruptPriority+0x68>
	}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	e000e3f0 	.word	0xe000e3f0
 8005f08:	200004a4 	.word	0x200004a4
 8005f0c:	e000ed0c 	.word	0xe000ed0c
 8005f10:	200004a8 	.word	0x200004a8

08005f14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	; 0x28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f20:	f7ff f9d2 	bl	80052c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f24:	4b5b      	ldr	r3, [pc, #364]	; (8006094 <pvPortMalloc+0x180>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f2c:	f000 f91a 	bl	8006164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f30:	4b59      	ldr	r3, [pc, #356]	; (8006098 <pvPortMalloc+0x184>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 8092 	bne.w	8006062 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01f      	beq.n	8005f84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005f44:	2208      	movs	r2, #8
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f023 0307 	bic.w	r3, r3, #7
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00c      	beq.n	8005f84 <pvPortMalloc+0x70>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	b672      	cpsid	i
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	b662      	cpsie	i
 8005f7e:	617b      	str	r3, [r7, #20]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d06b      	beq.n	8006062 <pvPortMalloc+0x14e>
 8005f8a:	4b44      	ldr	r3, [pc, #272]	; (800609c <pvPortMalloc+0x188>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d866      	bhi.n	8006062 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f94:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <pvPortMalloc+0x18c>)
 8005f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f98:	4b41      	ldr	r3, [pc, #260]	; (80060a0 <pvPortMalloc+0x18c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f9e:	e004      	b.n	8005faa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d903      	bls.n	8005fbc <pvPortMalloc+0xa8>
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f1      	bne.n	8005fa0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fbc:	4b35      	ldr	r3, [pc, #212]	; (8006094 <pvPortMalloc+0x180>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d04d      	beq.n	8006062 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2208      	movs	r2, #8
 8005fcc:	4413      	add	r3, r2
 8005fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d921      	bls.n	800602c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <pvPortMalloc+0x100>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	b672      	cpsid	i
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	b662      	cpsie	i
 800600e:	613b      	str	r3, [r7, #16]
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006026:	69b8      	ldr	r0, [r7, #24]
 8006028:	f000 f8fe 	bl	8006228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800602c:	4b1b      	ldr	r3, [pc, #108]	; (800609c <pvPortMalloc+0x188>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	4a19      	ldr	r2, [pc, #100]	; (800609c <pvPortMalloc+0x188>)
 8006038:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800603a:	4b18      	ldr	r3, [pc, #96]	; (800609c <pvPortMalloc+0x188>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	4b19      	ldr	r3, [pc, #100]	; (80060a4 <pvPortMalloc+0x190>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d203      	bcs.n	800604e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <pvPortMalloc+0x188>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <pvPortMalloc+0x190>)
 800604c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <pvPortMalloc+0x184>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	431a      	orrs	r2, r3
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006062:	f7ff f93f 	bl	80052e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <pvPortMalloc+0x176>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	b672      	cpsid	i
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	b662      	cpsie	i
 8006084:	60fb      	str	r3, [r7, #12]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <pvPortMalloc+0x174>
	return pvReturn;
 800608a:	69fb      	ldr	r3, [r7, #28]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3728      	adds	r7, #40	; 0x28
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	200040b4 	.word	0x200040b4
 8006098:	200040c0 	.word	0x200040c0
 800609c:	200040b8 	.word	0x200040b8
 80060a0:	200040ac 	.word	0x200040ac
 80060a4:	200040bc 	.word	0x200040bc

080060a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d04c      	beq.n	8006154 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060ba:	2308      	movs	r3, #8
 80060bc:	425b      	negs	r3, r3
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	4b23      	ldr	r3, [pc, #140]	; (800615c <vPortFree+0xb4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10c      	bne.n	80060f0 <vPortFree+0x48>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	b672      	cpsid	i
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	b662      	cpsie	i
 80060ea:	60fb      	str	r3, [r7, #12]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <vPortFree+0x6a>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	b672      	cpsid	i
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	b662      	cpsie	i
 800610c:	60bb      	str	r3, [r7, #8]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <vPortFree+0xb4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4013      	ands	r3, r2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d019      	beq.n	8006154 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d115      	bne.n	8006154 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <vPortFree+0xb4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	43db      	mvns	r3, r3
 8006132:	401a      	ands	r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006138:	f7ff f8c6 	bl	80052c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <vPortFree+0xb8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4413      	add	r3, r2
 8006146:	4a06      	ldr	r2, [pc, #24]	; (8006160 <vPortFree+0xb8>)
 8006148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800614a:	6938      	ldr	r0, [r7, #16]
 800614c:	f000 f86c 	bl	8006228 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006150:	f7ff f8c8 	bl	80052e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006154:	bf00      	nop
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200040c0 	.word	0x200040c0
 8006160:	200040b8 	.word	0x200040b8

08006164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800616a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800616e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006170:	4b27      	ldr	r3, [pc, #156]	; (8006210 <prvHeapInit+0xac>)
 8006172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00c      	beq.n	8006198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3307      	adds	r3, #7
 8006182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <prvHeapInit+0xac>)
 8006194:	4413      	add	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800619c:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <prvHeapInit+0xb0>)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061a2:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <prvHeapInit+0xb0>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061b0:	2208      	movs	r2, #8
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0307 	bic.w	r3, r3, #7
 80061be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a15      	ldr	r2, [pc, #84]	; (8006218 <prvHeapInit+0xb4>)
 80061c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061c6:	4b14      	ldr	r3, [pc, #80]	; (8006218 <prvHeapInit+0xb4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <prvHeapInit+0xb4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	1ad2      	subs	r2, r2, r3
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <prvHeapInit+0xb4>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <prvHeapInit+0xb8>)
 80061f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <prvHeapInit+0xbc>)
 80061fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <prvHeapInit+0xc0>)
 80061fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006202:	601a      	str	r2, [r3, #0]
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	200004ac 	.word	0x200004ac
 8006214:	200040ac 	.word	0x200040ac
 8006218:	200040b4 	.word	0x200040b4
 800621c:	200040bc 	.word	0x200040bc
 8006220:	200040b8 	.word	0x200040b8
 8006224:	200040c0 	.word	0x200040c0

08006228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006230:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <prvInsertBlockIntoFreeList+0xac>)
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e002      	b.n	800623c <prvInsertBlockIntoFreeList+0x14>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	429a      	cmp	r2, r3
 8006244:	d8f7      	bhi.n	8006236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	4413      	add	r3, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d108      	bne.n	800626a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	441a      	add	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	441a      	add	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d118      	bne.n	80062b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d00d      	beq.n	80062a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	441a      	add	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e008      	b.n	80062b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <prvInsertBlockIntoFreeList+0xb0>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e003      	b.n	80062b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d002      	beq.n	80062c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	200040ac 	.word	0x200040ac
 80062d8:	200040b4 	.word	0x200040b4

080062dc <__libc_init_array>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4d0d      	ldr	r5, [pc, #52]	; (8006314 <__libc_init_array+0x38>)
 80062e0:	4c0d      	ldr	r4, [pc, #52]	; (8006318 <__libc_init_array+0x3c>)
 80062e2:	1b64      	subs	r4, r4, r5
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	2600      	movs	r6, #0
 80062e8:	42a6      	cmp	r6, r4
 80062ea:	d109      	bne.n	8006300 <__libc_init_array+0x24>
 80062ec:	4d0b      	ldr	r5, [pc, #44]	; (800631c <__libc_init_array+0x40>)
 80062ee:	4c0c      	ldr	r4, [pc, #48]	; (8006320 <__libc_init_array+0x44>)
 80062f0:	f000 f82e 	bl	8006350 <_init>
 80062f4:	1b64      	subs	r4, r4, r5
 80062f6:	10a4      	asrs	r4, r4, #2
 80062f8:	2600      	movs	r6, #0
 80062fa:	42a6      	cmp	r6, r4
 80062fc:	d105      	bne.n	800630a <__libc_init_array+0x2e>
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	f855 3b04 	ldr.w	r3, [r5], #4
 8006304:	4798      	blx	r3
 8006306:	3601      	adds	r6, #1
 8006308:	e7ee      	b.n	80062e8 <__libc_init_array+0xc>
 800630a:	f855 3b04 	ldr.w	r3, [r5], #4
 800630e:	4798      	blx	r3
 8006310:	3601      	adds	r6, #1
 8006312:	e7f2      	b.n	80062fa <__libc_init_array+0x1e>
 8006314:	08006544 	.word	0x08006544
 8006318:	08006544 	.word	0x08006544
 800631c:	08006544 	.word	0x08006544
 8006320:	08006548 	.word	0x08006548

08006324 <memcpy>:
 8006324:	440a      	add	r2, r1
 8006326:	4291      	cmp	r1, r2
 8006328:	f100 33ff 	add.w	r3, r0, #4294967295
 800632c:	d100      	bne.n	8006330 <memcpy+0xc>
 800632e:	4770      	bx	lr
 8006330:	b510      	push	{r4, lr}
 8006332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633a:	4291      	cmp	r1, r2
 800633c:	d1f9      	bne.n	8006332 <memcpy+0xe>
 800633e:	bd10      	pop	{r4, pc}

08006340 <memset>:
 8006340:	4402      	add	r2, r0
 8006342:	4603      	mov	r3, r0
 8006344:	4293      	cmp	r3, r2
 8006346:	d100      	bne.n	800634a <memset+0xa>
 8006348:	4770      	bx	lr
 800634a:	f803 1b01 	strb.w	r1, [r3], #1
 800634e:	e7f9      	b.n	8006344 <memset+0x4>

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
